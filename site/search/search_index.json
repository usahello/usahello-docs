{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"USAHello Technical Documentation This site contains documentation of the tehchical architecture of the USAHello platform. The platform consists of the following sites and apps: Main information site: usahello.org LMS: classroom.usahello.org Marchadise: shirts.usahello.org FindHello Resource App: find.usahello.org also available on iOS AND Android","title":"Home"},{"location":"#usahello-technical-documentation","text":"This site contains documentation of the tehchical architecture of the USAHello platform. The platform consists of the following sites and apps: Main information site: usahello.org LMS: classroom.usahello.org Marchadise: shirts.usahello.org FindHello Resource App: find.usahello.org also available on iOS AND Android","title":"USAHello Technical Documentation"},{"location":"documentation-setup/","text":"Documentation Setup Repo & Hosting This project is built using MKdocs markdown , housed in GitHub , and hosted as a static site on Netlify . To develop documentation locally, you need to install mkdocs which is a Python package. You can create a Python virtual enviroment using Anaconda Navigator . Next create a new virutal env named USAHello-docs and initialize the env. Then install mkdocs in conda conda install -c conda-forge mkdocs Clone the repo from GitHub Navigate to the docs/ folder of this repository and run: mkdocs build This will build the documentation into a browseable HTML format that can be uploaded to a server or run. If you want to run a local version of the documentation that will live-reload any changes run: mkdocs serve The dev site is availabe at http://localhost:8005 . Deployment To deploy your changes simply run: mkdocs build And then push your changes to the GitHub repository. Netlify will then integrate the changes and build the site.","title":"Documentation setup"},{"location":"documentation-setup/#documentation-setup","text":"","title":"Documentation Setup"},{"location":"documentation-setup/#repo-hosting","text":"This project is built using MKdocs markdown , housed in GitHub , and hosted as a static site on Netlify . To develop documentation locally, you need to install mkdocs which is a Python package. You can create a Python virtual enviroment using Anaconda Navigator . Next create a new virutal env named USAHello-docs and initialize the env. Then install mkdocs in conda conda install -c conda-forge mkdocs Clone the repo from GitHub Navigate to the docs/ folder of this repository and run: mkdocs build This will build the documentation into a browseable HTML format that can be uploaded to a server or run. If you want to run a local version of the documentation that will live-reload any changes run: mkdocs serve The dev site is availabe at http://localhost:8005 .","title":"Repo &amp; Hosting"},{"location":"documentation-setup/#deployment","text":"To deploy your changes simply run: mkdocs build And then push your changes to the GitHub repository. Netlify will then integrate the changes and build the site.","title":"Deployment"},{"location":"downtime-response/","text":"Downtime Response All USAHello sites are monitored using two platforms to monitor uptime by pinging our sites at different intervals. Monitoring New Relic is a full service monitoring solution. We are currently using their \"Synthetics\" monitoring to ping test our sites. This solution pings the given pages every 60 seconds and does so from 5 locations across the United States and Canada (Columbus, OH; Washington, DC; San Francisco, CA; Montreal, QB; Portland, OR). Alerts are sent via email and the New Relic native app. We are currently on a free nonprofit plan with New Relic. Uptime Robot is a service that pings our pages every 5 minutes from a single location and alerts us via email or SMS if a given page is down/enreachable. This serves as a back up in case New Relic is down. Alerts are sent via email and SMS. We are on the free tier but are charged for SMS messages at the rate of $15 per 100 messages On Call While there is currently no on call policey, the Director of Technology and Lead Developer recieve all alerts and agree on coverage when one person is unavailable. The order of responsbility for responding to outages is as follows: Director of Technology - Collin Stevens Lead Developer - Kory Northrop US President - Sarah Ivory Outage Response USAHello.org (including classroom and shirts sub domians) When you are alerted to an outage on any of these domains take the following steps: Post to #tech channel in Slack that you are aware of the issue and investigating. Contact Kinsta Support by using the chat feature in the bottom right corner of the screen from any page. Login in to CloudFlare and navigate to the usahello.org site section. Navigate to Security > Overview in the left hand navigation. Regular Maintenance","title":"Downtime Response"},{"location":"downtime-response/#downtime-response","text":"All USAHello sites are monitored using two platforms to monitor uptime by pinging our sites at different intervals.","title":"Downtime Response"},{"location":"downtime-response/#monitoring","text":"New Relic is a full service monitoring solution. We are currently using their \"Synthetics\" monitoring to ping test our sites. This solution pings the given pages every 60 seconds and does so from 5 locations across the United States and Canada (Columbus, OH; Washington, DC; San Francisco, CA; Montreal, QB; Portland, OR). Alerts are sent via email and the New Relic native app. We are currently on a free nonprofit plan with New Relic. Uptime Robot is a service that pings our pages every 5 minutes from a single location and alerts us via email or SMS if a given page is down/enreachable. This serves as a back up in case New Relic is down. Alerts are sent via email and SMS. We are on the free tier but are charged for SMS messages at the rate of $15 per 100 messages","title":"Monitoring"},{"location":"downtime-response/#on-call","text":"While there is currently no on call policey, the Director of Technology and Lead Developer recieve all alerts and agree on coverage when one person is unavailable. The order of responsbility for responding to outages is as follows: Director of Technology - Collin Stevens Lead Developer - Kory Northrop US President - Sarah Ivory","title":"On Call"},{"location":"downtime-response/#outage-response","text":"","title":"Outage Response"},{"location":"downtime-response/#usahelloorg-including-classroom-and-shirts-sub-domians","text":"When you are alerted to an outage on any of these domains take the following steps: Post to #tech channel in Slack that you are aware of the issue and investigating. Contact Kinsta Support by using the chat feature in the bottom right corner of the screen from any page. Login in to CloudFlare and navigate to the usahello.org site section. Navigate to Security > Overview in the left hand navigation.","title":"USAHello.org (including classroom and shirts sub domians)"},{"location":"downtime-response/#regular-maintenance","text":"","title":"Regular Maintenance"},{"location":"outage-response/","text":"Outage Response All USAHello sites are monitored using two platforms to monitor uptime by pinging our sites at different intervals. Monitoring New Relic is a full service monitoring solution. We are currently using their \"Synthetics\" monitoring to ping test our sites. This solution pings the given pages every 60 seconds and does so from 5 locations across the United States and Canada (Columbus, OH; Washington, DC; San Francisco, CA; Montreal, QB; Portland, OR). Alerts are sent via email and the New Relic native app. We are currently on a free nonprofit plan with New Relic. Uptime Robot is a service that pings our pages every 5 minutes from a single location and alerts us via email or SMS if a given page is down/enreachable. This serves as a back up in case New Relic is down. Alerts are sent via email and SMS. We are on the free tier but are charged for SMS messages at the rate of $15 per 100 messages On Call While there is currently no on call policey, the Director of Technology and Lead Developer recieve all alerts and agree on coverage when one person is unavailable. The order of responsbility for responding to outages is as follows: Director of Technology - Collin Stevens Lead Developer - Kory Northrop US President - Sarah Ivory Response USAHello.org (including classroom and shirts sub domians) When you are alerted to an outage on any of these domains take the following steps: Post to #tech channel in Slack that you are aware of the issue and investigating. Contact Kinsta Support by using the chat feature in the bottom right corner of the screen from any page. Login in to CloudFlare and navigate to the usahello.org site section. Navigate to Security > Overview in the left hand navigation. If it is determined that a denial of service attack is under way (DDoS) then activite CloudFlare's Under Attack Mode on the main overview page for the site. Regular Maintenance - Please note that Kinsta performs regulare maintenance at their data centers that can trigger these alerts. They usaully last less than 10 minutes. You can view Kinsta status and sign up for updates here: https://status.kinsta.com/ find.usahello.org If there is an outage on the FindHello app take the following steps: Post to #tech channel in Slack that you are aware of the issue and investigating. Log into AWS . Make sure you are in the Oregon region and navigate to the EC2 Dashboard. Ensure the findhello-production-updated and the find-hello-solr instances are running Reboot the instances if they are showing errors or not running. Outages on other platforms To track outages on other platforms that USAHello utilizes, go to that products status page: Slack Google Workspace Asana Kinsta Cloudflare AWS","title":"OUTAGE RESPONSE"},{"location":"outage-response/#outage-response","text":"All USAHello sites are monitored using two platforms to monitor uptime by pinging our sites at different intervals.","title":"Outage Response"},{"location":"outage-response/#monitoring","text":"New Relic is a full service monitoring solution. We are currently using their \"Synthetics\" monitoring to ping test our sites. This solution pings the given pages every 60 seconds and does so from 5 locations across the United States and Canada (Columbus, OH; Washington, DC; San Francisco, CA; Montreal, QB; Portland, OR). Alerts are sent via email and the New Relic native app. We are currently on a free nonprofit plan with New Relic. Uptime Robot is a service that pings our pages every 5 minutes from a single location and alerts us via email or SMS if a given page is down/enreachable. This serves as a back up in case New Relic is down. Alerts are sent via email and SMS. We are on the free tier but are charged for SMS messages at the rate of $15 per 100 messages","title":"Monitoring"},{"location":"outage-response/#on-call","text":"While there is currently no on call policey, the Director of Technology and Lead Developer recieve all alerts and agree on coverage when one person is unavailable. The order of responsbility for responding to outages is as follows: Director of Technology - Collin Stevens Lead Developer - Kory Northrop US President - Sarah Ivory","title":"On Call"},{"location":"outage-response/#response","text":"","title":"Response"},{"location":"outage-response/#usahelloorg-including-classroom-and-shirts-sub-domians","text":"When you are alerted to an outage on any of these domains take the following steps: Post to #tech channel in Slack that you are aware of the issue and investigating. Contact Kinsta Support by using the chat feature in the bottom right corner of the screen from any page. Login in to CloudFlare and navigate to the usahello.org site section. Navigate to Security > Overview in the left hand navigation. If it is determined that a denial of service attack is under way (DDoS) then activite CloudFlare's Under Attack Mode on the main overview page for the site. Regular Maintenance - Please note that Kinsta performs regulare maintenance at their data centers that can trigger these alerts. They usaully last less than 10 minutes. You can view Kinsta status and sign up for updates here: https://status.kinsta.com/","title":"USAHello.org (including classroom and shirts sub domians)"},{"location":"outage-response/#findusahelloorg","text":"If there is an outage on the FindHello app take the following steps: Post to #tech channel in Slack that you are aware of the issue and investigating. Log into AWS . Make sure you are in the Oregon region and navigate to the EC2 Dashboard. Ensure the findhello-production-updated and the find-hello-solr instances are running Reboot the instances if they are showing errors or not running.","title":"find.usahello.org"},{"location":"outage-response/#outages-on-other-platforms","text":"To track outages on other platforms that USAHello utilizes, go to that products status page: Slack Google Workspace Asana Kinsta Cloudflare AWS","title":"Outages on other platforms"},{"location":"FindHello%20Deployment/","text":"Deployment Overview Web app For the web application, deployment of both the frontend app and backend API is automated via CircleCI. This means that CircleCI listens to the Bitbucket repo, and when is sees a change on a repo branch, it automatically launches a new build. If that build is successful, it then deploys to the relevant server on AWS. This is set up and configured for both the find-hello-app and find-hello-api repos for both the develop and master branches. Mobile app For the Android and iOS mobile apps, they need to be build and deployed manually. This means building local production/release versions of the application and then using the Google Play Console and Xcode + Apple App Store Connect console to upload the release builds.","title":"Overview"},{"location":"FindHello%20Deployment/#deployment-overview","text":"","title":"Deployment Overview"},{"location":"FindHello%20Deployment/#web-app","text":"For the web application, deployment of both the frontend app and backend API is automated via CircleCI. This means that CircleCI listens to the Bitbucket repo, and when is sees a change on a repo branch, it automatically launches a new build. If that build is successful, it then deploys to the relevant server on AWS. This is set up and configured for both the find-hello-app and find-hello-api repos for both the develop and master branches.","title":"Web app"},{"location":"FindHello%20Deployment/#mobile-app","text":"For the Android and iOS mobile apps, they need to be build and deployed manually. This means building local production/release versions of the application and then using the Google Play Console and Xcode + Apple App Store Connect console to upload the release builds.","title":"Mobile app"},{"location":"FindHello%20Deployment/mobile-deploy/","text":"Mobile Deployment General Before you create a new release for either Android or iOS you need increment the version number for the app in the config.xml : <?xml version='1.0' encoding='utf-8'?> <widget id=\"com.therefugeecenter.findhello\" version=\"1.1.7\" xmlns=\"http://www.w3.org/ns/widgets\" xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:cdv=\"http://cordova.apache.org/ns/1.0\"> ... (It's the widget version - here it's at 1.1.7 - don't mix it up with the XML version) and also in package.json : { \"name\": \"find-hello\", \"version\": \"1.1.7\", ... This version number is used by the Google Play Console and App Store Connect to create build numbers that have to be unique when they are uploaded. Android This has changed recently, moving from building, signing and zipping .apk files to generating .aab files instead. This is due to the Google Play Console requirement of using API >= 30 as well as an upgrade of cordova-android to version >= 10. Creating a production-ready build for Android is easily done with: ionic cordova build android --prod --release or to blow up the whole thing: rm -rf www node_modules platforms && npm install && ionic cordova platform add android && ionic cordova build android --prod --release This creates an .aab (Android App Bundle): ./platforms/android/app/build/outputs/bundle/release/app-release.aab This .aab format is used for the Google Play Console and is ready for upload. An Android App Bundle is a publishing format that includes all your app\u2019s compiled code and resources, and defers APK generation and signing to Google Play. Read more here: https://ionicframework.com/blog/google-play-android-app-bundle-requirement-for-new-apps/ This means that you shouldn't need to do anything else for getting the build onto the Google Play Store. Signing For some reason, we still need to sign the .aab file (or there's be an error uploading to Google Play Console). So run: jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore ~/.android/find-hello-keystore/find-hello-key.keystore -signedjar platforms/android/app/build/outputs/bundle/release/app-release-signed.aab platforms/android/app/build/outputs/bundle/release/app-release.aab uploadKey Then upload to the Play Console. Getting an APK If you want to test the production build, you have to do a few things to get from the .aab back to a regular .apk file brew install bundletool bundletool build-apks --bundle=./platforms/android/app/build/outputs/bundle/release/app-release.aab --output=./platforms/android/app/build/outputs/bundle/release/app-release.apks --mode=universal --ks=~/.android/find-hello-keystore/find-hello-key.keystore --ks-key-alias=uploadKey \\ Finally: unzip -p ./platforms/android/app/build/outputs/bundle/release/app-release.apks universal.apk > ./platforms/android/app/build/outputs/bundle/release/app-release.apk iOS Connect to Xcode Within XCode, you need to sign in to your developer account via Preferences > Account and selecting \"Apple ID\". Create signing certs Once added, you should choose \"The Refugee Center Online\" from Team and click \"Manage Certificates ...\". There are two families of certs: one family for iOS/WatchOS/TVOS and another for MacOS. Within each family, there are two types of signing certs: development and distribution . The former is per-developer (and therefore per machine) and latter is per-team (again, there can be only one per team) For the development certification you can create it here in the \"Manage Certificates\" box by hitting the \"+\" in the bottom left and clicking \"iOS Development\". The team distribution certificate is already be created. Select old build system Go to \"File > Project Settings\" and make sure \"Build System\" is set to \"Legacy Build System\" Building the app ionic cordova build ios --prod --release Now open the Xcode project in ./platforms/ios/FindHello.xcodeproj Configure the project You'll need to configure the project the first time you build. Go to the general setting in the project nativator and make sure you've selected the correct team (\"The Refugee Center Online\") Then select \"Generic iOS device\" from the build destination dropdown: Go to \"Product > Scheme > Edit Scheme\" in the toolbar. Select \"run\" from the sidebar and make sure \"Build Configuration\" is set to \"Release\". Then select \"Archive\" from the sidebar and do the same. Now you should be able to create an archive by running \"Product > Archive\" from the toolbar: Troubleshooting: Error with conflicting provisioning settings If the build fails and says you have issues with conflicting provisioning, check out this Stackoverflow answer You need to go back to the \"Signing & Capabilities\", deselect \"Automatic manage signings\" and then reselect the team \"The Refugee Center\" Troubleshooting: Error in Xcode build If you are using Xcode to run the app on an emulator or device, you might get the build error that includes: Firebase.h file not found. This seems to be due to the cordova-firebase-plugin that require Cocoapods to install dependences. To fix this, you need to make sure you open the FindHello.xcworkspace file with the open command: open ./platforms/ios/FindHello.xcworkspace This is so that the correct Cocoapods headers (installed via Ruby) are on the path when Xcode loads Issue Building Android Target SDK 30 If you see the following when uploading to the Google Store: Your app currently targets API level 28 and must target at least API level 30 to ensure that it is built on the latest APIs optimised for security and performance. To fix, first install these plugins: cordova plugin add cordova-plugin-androidx-adapter cordova plugin add cordova-plugin-androidx Create a file build-extras.gradle in the root of the project: android { defaultConfig { multiDexEnabled true } } dependencies { compile 'androidx.multidex:multidex:2.0.1' } Update the config.xml : <preference name=\"android-targetSdkVersion\" value=\"30\" /> ... <platform name=\"android\"> <resource-file src=\"build-extras.gradle\" target=\"app/build-extras.gradle\" /> Now build again: ionic build android --prod --release Distribute the archive If the archive builds correctly, you'll see the following screen: From there, click \"Distribute App\" followed by \"iOS App Store\" and then \"Upload\" as the destination. Keep the \"Upload you app's symbols to receive ...\" option on the next page. Keep \"Automatically manage signing\" selected on the next page. The new release should now be published to the App Store Connect.","title":"Mobile app deployment"},{"location":"FindHello%20Deployment/mobile-deploy/#mobile-deployment","text":"","title":"Mobile Deployment"},{"location":"FindHello%20Deployment/mobile-deploy/#general","text":"Before you create a new release for either Android or iOS you need increment the version number for the app in the config.xml : <?xml version='1.0' encoding='utf-8'?> <widget id=\"com.therefugeecenter.findhello\" version=\"1.1.7\" xmlns=\"http://www.w3.org/ns/widgets\" xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:cdv=\"http://cordova.apache.org/ns/1.0\"> ... (It's the widget version - here it's at 1.1.7 - don't mix it up with the XML version) and also in package.json : { \"name\": \"find-hello\", \"version\": \"1.1.7\", ... This version number is used by the Google Play Console and App Store Connect to create build numbers that have to be unique when they are uploaded.","title":"General"},{"location":"FindHello%20Deployment/mobile-deploy/#android","text":"This has changed recently, moving from building, signing and zipping .apk files to generating .aab files instead. This is due to the Google Play Console requirement of using API >= 30 as well as an upgrade of cordova-android to version >= 10. Creating a production-ready build for Android is easily done with: ionic cordova build android --prod --release or to blow up the whole thing: rm -rf www node_modules platforms && npm install && ionic cordova platform add android && ionic cordova build android --prod --release This creates an .aab (Android App Bundle): ./platforms/android/app/build/outputs/bundle/release/app-release.aab This .aab format is used for the Google Play Console and is ready for upload. An Android App Bundle is a publishing format that includes all your app\u2019s compiled code and resources, and defers APK generation and signing to Google Play. Read more here: https://ionicframework.com/blog/google-play-android-app-bundle-requirement-for-new-apps/ This means that you shouldn't need to do anything else for getting the build onto the Google Play Store.","title":"Android"},{"location":"FindHello%20Deployment/mobile-deploy/#signing","text":"For some reason, we still need to sign the .aab file (or there's be an error uploading to Google Play Console). So run: jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore ~/.android/find-hello-keystore/find-hello-key.keystore -signedjar platforms/android/app/build/outputs/bundle/release/app-release-signed.aab platforms/android/app/build/outputs/bundle/release/app-release.aab uploadKey Then upload to the Play Console.","title":"Signing"},{"location":"FindHello%20Deployment/mobile-deploy/#getting-an-apk","text":"If you want to test the production build, you have to do a few things to get from the .aab back to a regular .apk file brew install bundletool bundletool build-apks --bundle=./platforms/android/app/build/outputs/bundle/release/app-release.aab --output=./platforms/android/app/build/outputs/bundle/release/app-release.apks --mode=universal --ks=~/.android/find-hello-keystore/find-hello-key.keystore --ks-key-alias=uploadKey \\ Finally: unzip -p ./platforms/android/app/build/outputs/bundle/release/app-release.apks universal.apk > ./platforms/android/app/build/outputs/bundle/release/app-release.apk","title":"Getting an APK"},{"location":"FindHello%20Deployment/mobile-deploy/#ios","text":"","title":"iOS"},{"location":"FindHello%20Deployment/mobile-deploy/#connect-to-xcode","text":"Within XCode, you need to sign in to your developer account via Preferences > Account and selecting \"Apple ID\".","title":"Connect to Xcode"},{"location":"FindHello%20Deployment/mobile-deploy/#create-signing-certs","text":"Once added, you should choose \"The Refugee Center Online\" from Team and click \"Manage Certificates ...\". There are two families of certs: one family for iOS/WatchOS/TVOS and another for MacOS. Within each family, there are two types of signing certs: development and distribution . The former is per-developer (and therefore per machine) and latter is per-team (again, there can be only one per team) For the development certification you can create it here in the \"Manage Certificates\" box by hitting the \"+\" in the bottom left and clicking \"iOS Development\". The team distribution certificate is already be created.","title":"Create signing certs"},{"location":"FindHello%20Deployment/mobile-deploy/#select-old-build-system","text":"Go to \"File > Project Settings\" and make sure \"Build System\" is set to \"Legacy Build System\"","title":"Select old build system"},{"location":"FindHello%20Deployment/mobile-deploy/#building-the-app","text":"ionic cordova build ios --prod --release Now open the Xcode project in ./platforms/ios/FindHello.xcodeproj","title":"Building the app"},{"location":"FindHello%20Deployment/mobile-deploy/#configure-the-project","text":"You'll need to configure the project the first time you build. Go to the general setting in the project nativator and make sure you've selected the correct team (\"The Refugee Center Online\") Then select \"Generic iOS device\" from the build destination dropdown: Go to \"Product > Scheme > Edit Scheme\" in the toolbar. Select \"run\" from the sidebar and make sure \"Build Configuration\" is set to \"Release\". Then select \"Archive\" from the sidebar and do the same. Now you should be able to create an archive by running \"Product > Archive\" from the toolbar:","title":"Configure the project"},{"location":"FindHello%20Deployment/mobile-deploy/#troubleshooting-error-with-conflicting-provisioning-settings","text":"If the build fails and says you have issues with conflicting provisioning, check out this Stackoverflow answer You need to go back to the \"Signing & Capabilities\", deselect \"Automatic manage signings\" and then reselect the team \"The Refugee Center\"","title":"Troubleshooting: Error with conflicting provisioning settings"},{"location":"FindHello%20Deployment/mobile-deploy/#troubleshooting-error-in-xcode-build","text":"If you are using Xcode to run the app on an emulator or device, you might get the build error that includes: Firebase.h file not found. This seems to be due to the cordova-firebase-plugin that require Cocoapods to install dependences. To fix this, you need to make sure you open the FindHello.xcworkspace file with the open command: open ./platforms/ios/FindHello.xcworkspace This is so that the correct Cocoapods headers (installed via Ruby) are on the path when Xcode loads","title":"Troubleshooting: Error in Xcode build"},{"location":"FindHello%20Deployment/mobile-deploy/#issue-building-android-target-sdk-30","text":"If you see the following when uploading to the Google Store: Your app currently targets API level 28 and must target at least API level 30 to ensure that it is built on the latest APIs optimised for security and performance. To fix, first install these plugins: cordova plugin add cordova-plugin-androidx-adapter cordova plugin add cordova-plugin-androidx Create a file build-extras.gradle in the root of the project: android { defaultConfig { multiDexEnabled true } } dependencies { compile 'androidx.multidex:multidex:2.0.1' } Update the config.xml : <preference name=\"android-targetSdkVersion\" value=\"30\" /> ... <platform name=\"android\"> <resource-file src=\"build-extras.gradle\" target=\"app/build-extras.gradle\" /> Now build again: ionic build android --prod --release","title":"Issue Building Android Target SDK 30"},{"location":"FindHello%20Deployment/mobile-deploy/#distribute-the-archive","text":"If the archive builds correctly, you'll see the following screen: From there, click \"Distribute App\" followed by \"iOS App Store\" and then \"Upload\" as the destination. Keep the \"Upload you app's symbols to receive ...\" option on the next page. Keep \"Automatically manage signing\" selected on the next page. The new release should now be published to the App Store Connect.","title":"Distribute the archive"},{"location":"FindHello%20Deployment/server-setup/","text":"Server Setup These are the steps for setting up a new production (or staging) server on an AWS instance. Overview For the Django API, the server uses the following libraries to server the app: Postgresql 9.6 Python 3 + virtualenv and virtualenvwrapper Supervisord (for managing the process) Gunicorn (the application server) Nginx (the proxy) For the Ionic app, it's simply served directly using Nginx. Update OS Update: sudo apt-get update && sudo apt-get upgrade && sudo apt-get dselect-upgrade Install dependencies sudo add-apt-repository ppa:certbot/certbot sudo apt-get update && sudo apt-get upgrade && sudo apt-get dselect-upgrade sudo apt-get install vim git nginx python3-setuptools python3-dev python3-pip postgresql-10 postgresql-client-10 postgis supervisor python-certbot-nginx zlib1g-dev libjpeg-dev postgresql-server-dev-10 redis Configure git sudo git config --global user.name \"Timmy O'Mahony\" sudo git config --global user.email \"timmy@weareferal.com\" sudo git config --global core.editor \"vim\" Add SSH key Once you have access to the new server (usually via username/password), you need to add your own personal public key to the server so that you can access it over SSH (in the next step, we'll disable password access) On your machine , if you don't already have one, create a public/private key pair and make sure to use a passphase ssh-keygen -t rsa -b 4096 Copy the contents of the public key : cat ~/.ssh/id_rsa.pub Back on the server , add the public key to the ~/.ssh/authorized_keys file: vim ~/.ssh/authorized_keys and update the permissiones chmod 0600 ~/.ssh/authorized_keys Make sure there aren't any spaces around the public key, or any blanks lines. You should now be able to log out of the server, and log in again with you key: ssh -i ~/.ssh/id_rsa hey@timmyomahony.com Update SSH configuration Restrict SSH login to public/private key only. Open the SSH config: vim /etc/ssh/sshd_config Uncomment: AuthorizedKeysFile %h/.ssh/authorized_keys Change the default port: Port 30000 Disable password login: PasswordAuthentication no Prevent root login: PermitRootLogin no Enable key login PubkeyAuthentication yes Restart SSH: service ssh restart Add Github deployment key To be able to get the codebase, we need to create a public/private key pair on the server. The private key should never leave the server, so make sure to generate it on the server, not locally on your laptop ssh-keygen -t rsa -b 4096 Copy the contents of the public key : cat ~/.ssh/id_rsa.pub Now add a new \"Deployment Key\" via Github https://github.com/weareferal/find-hello-api/settings/keys And paste in the public key for the server. On the server, open/create the SSH config file: vim ~/.ssh/config and add the following: Host github.com User git IdentityFile ~/.ssh/id_rsa Clone the repo cd ~/ git clone git@github.com:weareferal/find-hello-api.git find_hello cd find_hello Setup accounts For deployment, you need accounts with: Sentry.io (for errors) Mailgun (for emails) So make sure those are created and configured. Add environment variables cp env.example .env GOOGLE_MAP_API_KEY=[...] DATABASE_URL=postgresql://find_hello:[...]@localhost/find_hello DJANGO_ADMIN_URL=admin-dashboard/ DJANGO_SETTINGS_MODULE=config.settings.production DJANGO_SECRET_KEY=[...] DJANGO_ALLOWED_HOSTS=findhello.therefugeecenter.org DJANGO_MAILGUN_API_KEY=key-[...] DJANGO_SERVER_EMAIL=noreply@therefugeecenter.org MAILGUN_SENDER_DOMAIN=mg.therefugeecenter.org DJANGO_SECURE_SSL_REDIRECT=False DJANGO_SENTRY_DSN=[...] DJANGO_SENTRY_PROJECT=[...] DJANGO_SENTRY_ENVIRONMENT='staging' HAYSTACK_URL='' HAYSTACK_ADMIN_URL='' Create DB sudo -u postgres psql create database find_hello; create user find_hello with password [PASSWORD]; grant all privileges on database find_hello to find_hello; create extension postgis; sudo vim /etc/postgresql/10/main/pg_hba.conf and add to the bottom: local find_hello find_hello password and restart: sudo /etc/init.d/postgresql restart Install virtualenv and virtualenvwrapper sudo pip3 install virtualenv virtualenvwrapper mkdir ~/.venvs vim ~/.bashrc and add: export WORKON_HOME=~/.venvs export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv source /usr/local/bin/virtualenvwrapper.sh Create Virtualenv and install dependencies mkvirtualenv find_hello --python=python3 workon find_hello add2virtualenv ./ pip install -r requirements/production.txt workon find_hello Add GeoDjango data file The app uses GeoDjango for some features, including IP geolocation. GeoDjango requires the inclusion of a local data file to run. Create a geofiles directory in the root of the repo (this will be ignored by Github) and download the following: http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz Unzip the archive and place the GeoLite2-City.mmdb file in geofiles . Setup Django python manage.py migrate python manage.py collectstatic --noinput python manage.py createsuperuser Create log files: mkdir -p var/logs touch /home/ubuntu/find-hello-api/var/logs/supervisor.out.log touch /home/ubuntu/find-hello-api/var/logs/supervisor.err.log touch /home/ubuntu/find-hello-api/var/logs/gunicorn.out.log touch /home/ubuntu/find-hello-api/var/logs/gunicorn.err.log touch /home/ubuntu/find-hello-api/var/logs/nginx.err.log touch /home/ubuntu/find-hello-api/var/logs/nginx.out.log Setup Supervisor We need a process manager to start/stop the app First, make its possible to restart the supervisor processes as a non-root user by editing /etc/supervisor/supervisor.conf file and adding the following: [unix_http_server] file=/var/run/supervisord.sock ... chown=admin:admin ... [supervisorctl] serverurl = unix:///var/run/supervisord.sock Then make sure to create the socket file: sudo touch /var/run/supervisord.sock sudo chown admin:admin /var/run/supervisord.sock Copy the config sudo cp /home/ubuntu/find-hello-api/etc/supervisor.conf /etc/supervisor/conf.d/find_hello.conf then start it supervisorctl reread supervisorctl update and check the status supervisorctl status Setup Nginx Run certbot to generate a new SSL cert and default Nginx config sudo certbot --nginx -d findhello.therefugeecenter.org This will generate the file at /etc/nginx/sites-enabled/default . Delete this and copy the example: sudo cp etc/nginx.conf /etc/nginx/conf.d/find_hello.conf","title":"Server setup"},{"location":"FindHello%20Deployment/server-setup/#server-setup","text":"These are the steps for setting up a new production (or staging) server on an AWS instance.","title":"Server Setup"},{"location":"FindHello%20Deployment/server-setup/#overview","text":"For the Django API, the server uses the following libraries to server the app: Postgresql 9.6 Python 3 + virtualenv and virtualenvwrapper Supervisord (for managing the process) Gunicorn (the application server) Nginx (the proxy) For the Ionic app, it's simply served directly using Nginx.","title":"Overview"},{"location":"FindHello%20Deployment/server-setup/#update-os","text":"Update: sudo apt-get update && sudo apt-get upgrade && sudo apt-get dselect-upgrade","title":"Update OS"},{"location":"FindHello%20Deployment/server-setup/#install-dependencies","text":"sudo add-apt-repository ppa:certbot/certbot sudo apt-get update && sudo apt-get upgrade && sudo apt-get dselect-upgrade sudo apt-get install vim git nginx python3-setuptools python3-dev python3-pip postgresql-10 postgresql-client-10 postgis supervisor python-certbot-nginx zlib1g-dev libjpeg-dev postgresql-server-dev-10 redis","title":"Install dependencies"},{"location":"FindHello%20Deployment/server-setup/#configure-git","text":"sudo git config --global user.name \"Timmy O'Mahony\" sudo git config --global user.email \"timmy@weareferal.com\" sudo git config --global core.editor \"vim\"","title":"Configure git"},{"location":"FindHello%20Deployment/server-setup/#add-ssh-key","text":"Once you have access to the new server (usually via username/password), you need to add your own personal public key to the server so that you can access it over SSH (in the next step, we'll disable password access) On your machine , if you don't already have one, create a public/private key pair and make sure to use a passphase ssh-keygen -t rsa -b 4096 Copy the contents of the public key : cat ~/.ssh/id_rsa.pub Back on the server , add the public key to the ~/.ssh/authorized_keys file: vim ~/.ssh/authorized_keys and update the permissiones chmod 0600 ~/.ssh/authorized_keys Make sure there aren't any spaces around the public key, or any blanks lines. You should now be able to log out of the server, and log in again with you key: ssh -i ~/.ssh/id_rsa hey@timmyomahony.com","title":"Add SSH key"},{"location":"FindHello%20Deployment/server-setup/#update-ssh-configuration","text":"Restrict SSH login to public/private key only. Open the SSH config: vim /etc/ssh/sshd_config Uncomment: AuthorizedKeysFile %h/.ssh/authorized_keys Change the default port: Port 30000 Disable password login: PasswordAuthentication no Prevent root login: PermitRootLogin no Enable key login PubkeyAuthentication yes Restart SSH: service ssh restart","title":"Update SSH configuration"},{"location":"FindHello%20Deployment/server-setup/#add-github-deployment-key","text":"To be able to get the codebase, we need to create a public/private key pair on the server. The private key should never leave the server, so make sure to generate it on the server, not locally on your laptop ssh-keygen -t rsa -b 4096 Copy the contents of the public key : cat ~/.ssh/id_rsa.pub Now add a new \"Deployment Key\" via Github https://github.com/weareferal/find-hello-api/settings/keys And paste in the public key for the server. On the server, open/create the SSH config file: vim ~/.ssh/config and add the following: Host github.com User git IdentityFile ~/.ssh/id_rsa","title":"Add Github deployment key"},{"location":"FindHello%20Deployment/server-setup/#clone-the-repo","text":"cd ~/ git clone git@github.com:weareferal/find-hello-api.git find_hello cd find_hello","title":"Clone the repo"},{"location":"FindHello%20Deployment/server-setup/#setup-accounts","text":"For deployment, you need accounts with: Sentry.io (for errors) Mailgun (for emails) So make sure those are created and configured.","title":"Setup accounts"},{"location":"FindHello%20Deployment/server-setup/#add-environment-variables","text":"cp env.example .env GOOGLE_MAP_API_KEY=[...] DATABASE_URL=postgresql://find_hello:[...]@localhost/find_hello DJANGO_ADMIN_URL=admin-dashboard/ DJANGO_SETTINGS_MODULE=config.settings.production DJANGO_SECRET_KEY=[...] DJANGO_ALLOWED_HOSTS=findhello.therefugeecenter.org DJANGO_MAILGUN_API_KEY=key-[...] DJANGO_SERVER_EMAIL=noreply@therefugeecenter.org MAILGUN_SENDER_DOMAIN=mg.therefugeecenter.org DJANGO_SECURE_SSL_REDIRECT=False DJANGO_SENTRY_DSN=[...] DJANGO_SENTRY_PROJECT=[...] DJANGO_SENTRY_ENVIRONMENT='staging' HAYSTACK_URL='' HAYSTACK_ADMIN_URL=''","title":"Add environment variables"},{"location":"FindHello%20Deployment/server-setup/#create-db","text":"sudo -u postgres psql create database find_hello; create user find_hello with password [PASSWORD]; grant all privileges on database find_hello to find_hello; create extension postgis; sudo vim /etc/postgresql/10/main/pg_hba.conf and add to the bottom: local find_hello find_hello password and restart: sudo /etc/init.d/postgresql restart","title":"Create DB"},{"location":"FindHello%20Deployment/server-setup/#install-virtualenv-and-virtualenvwrapper","text":"sudo pip3 install virtualenv virtualenvwrapper mkdir ~/.venvs vim ~/.bashrc and add: export WORKON_HOME=~/.venvs export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv source /usr/local/bin/virtualenvwrapper.sh","title":"Install virtualenv and virtualenvwrapper"},{"location":"FindHello%20Deployment/server-setup/#create-virtualenv-and-install-dependencies","text":"mkvirtualenv find_hello --python=python3 workon find_hello add2virtualenv ./ pip install -r requirements/production.txt workon find_hello","title":"Create Virtualenv and install dependencies"},{"location":"FindHello%20Deployment/server-setup/#add-geodjango-data-file","text":"The app uses GeoDjango for some features, including IP geolocation. GeoDjango requires the inclusion of a local data file to run. Create a geofiles directory in the root of the repo (this will be ignored by Github) and download the following: http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz Unzip the archive and place the GeoLite2-City.mmdb file in geofiles .","title":"Add GeoDjango data file"},{"location":"FindHello%20Deployment/server-setup/#setup-django","text":"python manage.py migrate python manage.py collectstatic --noinput python manage.py createsuperuser","title":"Setup Django"},{"location":"FindHello%20Deployment/server-setup/#create-log-files","text":"mkdir -p var/logs touch /home/ubuntu/find-hello-api/var/logs/supervisor.out.log touch /home/ubuntu/find-hello-api/var/logs/supervisor.err.log touch /home/ubuntu/find-hello-api/var/logs/gunicorn.out.log touch /home/ubuntu/find-hello-api/var/logs/gunicorn.err.log touch /home/ubuntu/find-hello-api/var/logs/nginx.err.log touch /home/ubuntu/find-hello-api/var/logs/nginx.out.log","title":"Create log files:"},{"location":"FindHello%20Deployment/server-setup/#setup-supervisor","text":"We need a process manager to start/stop the app First, make its possible to restart the supervisor processes as a non-root user by editing /etc/supervisor/supervisor.conf file and adding the following: [unix_http_server] file=/var/run/supervisord.sock ... chown=admin:admin ... [supervisorctl] serverurl = unix:///var/run/supervisord.sock Then make sure to create the socket file: sudo touch /var/run/supervisord.sock sudo chown admin:admin /var/run/supervisord.sock Copy the config sudo cp /home/ubuntu/find-hello-api/etc/supervisor.conf /etc/supervisor/conf.d/find_hello.conf then start it supervisorctl reread supervisorctl update and check the status supervisorctl status","title":"Setup Supervisor"},{"location":"FindHello%20Deployment/server-setup/#setup-nginx","text":"Run certbot to generate a new SSL cert and default Nginx config sudo certbot --nginx -d findhello.therefugeecenter.org This will generate the file at /etc/nginx/sites-enabled/default . Delete this and copy the example: sudo cp etc/nginx.conf /etc/nginx/conf.d/find_hello.conf","title":"Setup Nginx"},{"location":"FindHello%20Deployment/solr-setup/","text":"Solr Setup The purpose of this document is to show the steps that were initially used to set up the instanc incase it needs to be re-created at some point. Solr Setup Overview Our EC2 instance is a nano / small Ubuntu 18.04 server running Solr 8.2.0 via Jetty. Solr is installed manually via the suggested setup steps on the Solr website: https://lucene.apache.org/solr/guide/8_1/taking-solr-to-production.html#taking-solr-to-production EC2 Instance The first thing is the EC2 instance setup. We don't want our instance available to the outside world, so the first thing to do is to lock-down the EC2 instance that Solr will be installed on. For our Django servers and Solr to communicate, they need: To be in the same VPC Be in the same subnet (not 100% about this) First find the instance and take note of the private IP, here 172.31.19.142 : Then click the \"subnet ID\" to be brought to the relevant subnet page: Take note of the IPv4 CIDR value 172.31.16.0/20 . Then go to back to the (Solr) instance page and click on the \"security group\": Hit \"edit\" and add a new rule that restricts connections to the subnet this instance is in. This now means that only AWS instance can communicate with our Solr instance. SSH Also note that SSH is set up on port 30000 and is publically available. Installation Install Java: sudo apt install -y default-jdk wget http://www-eu.apache.org/dist/lucene/solr/8.2.0/solr-8.2.0.tgz tar zxf solr-8.2.0.tgz solr-8.2.0/bin/install_solr_service.sh --strip-components=2 sudo bash ./install_solr_service.sh solr-8.2.0.tgz You can start/stop and restart with sudo service solr restart sudo service solr stop sudo service solr start Create a core Add a core: sudo -u solr /opt/solr/bin/solr create -c findhello-staging -n data_driven_schema_configs This will add our new core configuration and data to /var/solr/data/findhello-staging/ Generate a schema.xml The schema is the file Solr uses to create its indexes. It explains what fields we want in our search documents. When we create a core, Solr adds a default schema but we need to generate one specific to our Django app. Thankfull, Haystack can do that for us. So back on the Django server , run the command: python manage.py build_solr_schema This will output a schema file that you need to copy and paste to the Solr config on the Solr instance at /var/solr/data/findhello-staging/conf/schema.xml WARNING: You will need to update the schema any time you make a change to the structure of our search documents (i.e. search_indexes.py ) in Django. Haystack doesn't automatically tell Solr that the structure of our documents has changed, so you need to update the file manually and reindex/update the index. Create a solrconfig.xml Like the schema, we also need to update the Solr settings for our core so that it's compatible with our needs. Get the default Haystack Solr Config from the Haystack Github page: https://github.com/django-haystack/django-haystack/blob/master/haystack/templates/search_configuration/solrconfig.xml and copy it the core config folder on the Solr instance : sudo mv /var/solr/data/findhello-staging/conf/solrconfig.xml /var/solr/data/findhello-staging/conf/solrconfig.xml.bak sudo vim /var/solr/data/findhello-staging/conf/solrconfig.xml ... Configure Django Make sure your Haystack settings are correct. In you .env : HAYSTACK_ADMIN_URL=\"http://172.31.19.142:8983/solr/\" HAYSTACK_URL=\"http://172.31.19.142/solr/findhello-staging/\" HAYSTACK_ENGINE=\"haystack.backends.solr_backend.SolrEngine\" Note that 172.31.19.142 is the private IP of the AWS instance with Solr installed. Making changes to Solr If you change your search_indexes in Django, you need to replace the schema.xml and solrconfig.xml mentioned above with the new versions. Ideally, you generate these files via the manage.py build_schema_files command from Haystack locally on your machine and then commit them to Github. Then, take the commited files and update them on the Solr instance: sudo vim /var/solr/data/findhello-staging/conf/solrconfig.xml sudo vim /var/solr/data/findhello-staging/conf/schema.xml You then need to make sure to reload the core: curl 'http://127.0.0.1:8983/solr/admin/cores?action=RELOAD&core=findhello-staging&wt=json' You should then rebuild the index from the Django staging/production instance python manage.py rebuild_index Updating the index http://docs.haystacksearch.org/en/master/searchindex_api.html#keeping-the-index-fresh The index needs to be updated periodically: python manage.py update_index -r (Note: the inclusion of the -r flag ensures that the index removes any records that were deleted directly from the DB) So we have a crontab job that does this hourly: crontab -e DJANGO_SETTINGS_MODULE=config.settings.production */5 * * * * /home/ubuntu/.venvs/find_hello/bin/python /home/ubuntu/find-hello-api/manage.py update_index -r >> /home/ubuntu/find-hello-api/logfiles/cron.out 2>&1 Note: it's important to include the DJANGO_SETTINGS_MODULE environment variable here so that cron uses the correct settings file when running the Django Haystack management command. Exclusing this was previously responsible for us missing the fact that the index wasn't being updated. Accesing the admin panel Becaues we have blocked port :8983 to the public, we can't see the admin panel. One trick here is to perform a port-forward via SSH. In your local ~/.ssh/config add the following: Host solr.usahello.org HostName 52.38.105.19 User ubuntu Port 30000 LocalForward 8001 localhost:8983 This will allow you to connect to the remote Solr admin by accessing http://localhost:8001 on your own machine. Troubleshooting Error regarding currency.xml After installing the schema with Haystack, I was noticing this error: org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Could not load conf for core mycore: Error while parsing currency configuration file currency.xml This is due to the default haystack schema that it generates includes fields for currency, for example: <dynamicField name=\"*_c\" type=\"currency\" indexed=\"true\" stored=\"true\"/> ... <fieldType name=\"currency\" class=\"solr.CurrencyField\" precisionStep=\"8\" defaultCurrency=\"USD\" currencyConfig=\"currency.xml\" /> ... So delete them! Or you can add an example currency.xml to the core's config folder: https://raw.githubusercontent.com/apache/lucene-solr/master/solr/example/files/conf/currency.xml Error regarding QueryElevationComponent If you see this: org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Error initializing QueryElevationComponent Delete the following from the solrconfig.xml : <!-- Query Elevation Component http://wiki.apache.org/solr/QueryElevationComponent a search component that enables you to configure the top results for a given query regardless of the normal lucene scoring. --> <searchComponent name=\"elevator\" class=\"solr.QueryElevationComponent\" > <!-- pick a fieldType to analyze queries --> <str name=\"queryFieldType\">string</str> <str name=\"config-file\">elevate.xml</str> </searchComponent> <!-- A request handler for demonstrating the elevator component --> <requestHandler name=\"/elevate\" class=\"solr.SearchHandler\" startup=\"lazy\"> <lst name=\"defaults\"> <str name=\"echoParams\">explicit</str> </lst> <arr name=\"last-components\"> <str>elevator</str> </arr> </requestHandler>","title":"Solr setup"},{"location":"FindHello%20Deployment/solr-setup/#solr-setup","text":"The purpose of this document is to show the steps that were initially used to set up the instanc incase it needs to be re-created at some point.","title":"Solr Setup"},{"location":"FindHello%20Deployment/solr-setup/#solr-setup_1","text":"","title":"Solr Setup"},{"location":"FindHello%20Deployment/solr-setup/#overview","text":"Our EC2 instance is a nano / small Ubuntu 18.04 server running Solr 8.2.0 via Jetty. Solr is installed manually via the suggested setup steps on the Solr website: https://lucene.apache.org/solr/guide/8_1/taking-solr-to-production.html#taking-solr-to-production","title":"Overview"},{"location":"FindHello%20Deployment/solr-setup/#ec2-instance","text":"The first thing is the EC2 instance setup. We don't want our instance available to the outside world, so the first thing to do is to lock-down the EC2 instance that Solr will be installed on. For our Django servers and Solr to communicate, they need: To be in the same VPC Be in the same subnet (not 100% about this) First find the instance and take note of the private IP, here 172.31.19.142 : Then click the \"subnet ID\" to be brought to the relevant subnet page: Take note of the IPv4 CIDR value 172.31.16.0/20 . Then go to back to the (Solr) instance page and click on the \"security group\": Hit \"edit\" and add a new rule that restricts connections to the subnet this instance is in. This now means that only AWS instance can communicate with our Solr instance.","title":"EC2 Instance"},{"location":"FindHello%20Deployment/solr-setup/#ssh","text":"Also note that SSH is set up on port 30000 and is publically available.","title":"SSH"},{"location":"FindHello%20Deployment/solr-setup/#installation","text":"Install Java: sudo apt install -y default-jdk wget http://www-eu.apache.org/dist/lucene/solr/8.2.0/solr-8.2.0.tgz tar zxf solr-8.2.0.tgz solr-8.2.0/bin/install_solr_service.sh --strip-components=2 sudo bash ./install_solr_service.sh solr-8.2.0.tgz You can start/stop and restart with sudo service solr restart sudo service solr stop sudo service solr start","title":"Installation"},{"location":"FindHello%20Deployment/solr-setup/#create-a-core","text":"Add a core: sudo -u solr /opt/solr/bin/solr create -c findhello-staging -n data_driven_schema_configs This will add our new core configuration and data to /var/solr/data/findhello-staging/","title":"Create a core"},{"location":"FindHello%20Deployment/solr-setup/#generate-a-schemaxml","text":"The schema is the file Solr uses to create its indexes. It explains what fields we want in our search documents. When we create a core, Solr adds a default schema but we need to generate one specific to our Django app. Thankfull, Haystack can do that for us. So back on the Django server , run the command: python manage.py build_solr_schema This will output a schema file that you need to copy and paste to the Solr config on the Solr instance at /var/solr/data/findhello-staging/conf/schema.xml WARNING: You will need to update the schema any time you make a change to the structure of our search documents (i.e. search_indexes.py ) in Django. Haystack doesn't automatically tell Solr that the structure of our documents has changed, so you need to update the file manually and reindex/update the index.","title":"Generate a schema.xml"},{"location":"FindHello%20Deployment/solr-setup/#create-a-solrconfigxml","text":"Like the schema, we also need to update the Solr settings for our core so that it's compatible with our needs. Get the default Haystack Solr Config from the Haystack Github page: https://github.com/django-haystack/django-haystack/blob/master/haystack/templates/search_configuration/solrconfig.xml and copy it the core config folder on the Solr instance : sudo mv /var/solr/data/findhello-staging/conf/solrconfig.xml /var/solr/data/findhello-staging/conf/solrconfig.xml.bak sudo vim /var/solr/data/findhello-staging/conf/solrconfig.xml ...","title":"Create a solrconfig.xml"},{"location":"FindHello%20Deployment/solr-setup/#configure-django","text":"Make sure your Haystack settings are correct. In you .env : HAYSTACK_ADMIN_URL=\"http://172.31.19.142:8983/solr/\" HAYSTACK_URL=\"http://172.31.19.142/solr/findhello-staging/\" HAYSTACK_ENGINE=\"haystack.backends.solr_backend.SolrEngine\" Note that 172.31.19.142 is the private IP of the AWS instance with Solr installed.","title":"Configure Django"},{"location":"FindHello%20Deployment/solr-setup/#making-changes-to-solr","text":"If you change your search_indexes in Django, you need to replace the schema.xml and solrconfig.xml mentioned above with the new versions. Ideally, you generate these files via the manage.py build_schema_files command from Haystack locally on your machine and then commit them to Github. Then, take the commited files and update them on the Solr instance: sudo vim /var/solr/data/findhello-staging/conf/solrconfig.xml sudo vim /var/solr/data/findhello-staging/conf/schema.xml You then need to make sure to reload the core: curl 'http://127.0.0.1:8983/solr/admin/cores?action=RELOAD&core=findhello-staging&wt=json' You should then rebuild the index from the Django staging/production instance python manage.py rebuild_index","title":"Making changes to Solr"},{"location":"FindHello%20Deployment/solr-setup/#updating-the-index","text":"http://docs.haystacksearch.org/en/master/searchindex_api.html#keeping-the-index-fresh The index needs to be updated periodically: python manage.py update_index -r (Note: the inclusion of the -r flag ensures that the index removes any records that were deleted directly from the DB) So we have a crontab job that does this hourly: crontab -e DJANGO_SETTINGS_MODULE=config.settings.production */5 * * * * /home/ubuntu/.venvs/find_hello/bin/python /home/ubuntu/find-hello-api/manage.py update_index -r >> /home/ubuntu/find-hello-api/logfiles/cron.out 2>&1 Note: it's important to include the DJANGO_SETTINGS_MODULE environment variable here so that cron uses the correct settings file when running the Django Haystack management command. Exclusing this was previously responsible for us missing the fact that the index wasn't being updated.","title":"Updating the index"},{"location":"FindHello%20Deployment/solr-setup/#accesing-the-admin-panel","text":"Becaues we have blocked port :8983 to the public, we can't see the admin panel. One trick here is to perform a port-forward via SSH. In your local ~/.ssh/config add the following: Host solr.usahello.org HostName 52.38.105.19 User ubuntu Port 30000 LocalForward 8001 localhost:8983 This will allow you to connect to the remote Solr admin by accessing http://localhost:8001 on your own machine.","title":"Accesing the admin panel"},{"location":"FindHello%20Deployment/solr-setup/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"FindHello%20Deployment/solr-setup/#error-regarding-currencyxml","text":"After installing the schema with Haystack, I was noticing this error: org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Could not load conf for core mycore: Error while parsing currency configuration file currency.xml This is due to the default haystack schema that it generates includes fields for currency, for example: <dynamicField name=\"*_c\" type=\"currency\" indexed=\"true\" stored=\"true\"/> ... <fieldType name=\"currency\" class=\"solr.CurrencyField\" precisionStep=\"8\" defaultCurrency=\"USD\" currencyConfig=\"currency.xml\" /> ... So delete them! Or you can add an example currency.xml to the core's config folder: https://raw.githubusercontent.com/apache/lucene-solr/master/solr/example/files/conf/currency.xml","title":"Error regarding currency.xml"},{"location":"FindHello%20Deployment/solr-setup/#error-regarding-queryelevationcomponent","text":"If you see this: org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Error initializing QueryElevationComponent Delete the following from the solrconfig.xml : <!-- Query Elevation Component http://wiki.apache.org/solr/QueryElevationComponent a search component that enables you to configure the top results for a given query regardless of the normal lucene scoring. --> <searchComponent name=\"elevator\" class=\"solr.QueryElevationComponent\" > <!-- pick a fieldType to analyze queries --> <str name=\"queryFieldType\">string</str> <str name=\"config-file\">elevate.xml</str> </searchComponent> <!-- A request handler for demonstrating the elevator component --> <requestHandler name=\"/elevate\" class=\"solr.SearchHandler\" startup=\"lazy\"> <lst name=\"defaults\"> <str name=\"echoParams\">explicit</str> </lst> <arr name=\"last-components\"> <str>elevator</str> </arr> </requestHandler>","title":"Error regarding QueryElevationComponent"},{"location":"FindHello%20Deployment/web-deploy/","text":"Web Deployment ~Both the Django API and the Ionic app are configured to be automatically deployed to the web using CircleCI~. Deploying the REST API and Ionic app is mostly handled by CircleCI. Currently, the following are automatically deployed: Staging Django API ( develop branch) Production Django API ( master branch) Staging Ionic web app ( develop branch) Notably, the production Ionic app is not automatically deployed (the master branch) so much be manually deployed. Git The easiest way to develop and release new features is to use a \"Gitflow\" style approach. Create a new feature branch , for example feature/new-nav , and work locally within this branch until it is ready to test. When ready to test on the staging server, you merge this feature branch with the develop branch either via a pull request or standard merge. CircleCI will detect this change an run a new build to: https://resources.staging.usahello.org . Once that has been tested and is OK, then you create another pull request from develop into master . https://resources.usahello.org Django API deployment CircleCI config You can see how CircleCI is configured in the .circleci/config.yml file in the repo: https://bitbucket.org/findhello/find-hello-api/src/master/.circleci/ Fabric config There is a second configuration file .circleci/deploy.py . This is the Fabric deployment script. Fabric is a Python library that helps make deployments over SSH. In our case, once our CircleCI has created the build, it then runs the Fabric script which in-turn connects to our server and carries out a number of commands to pull the latest code. A few things to be aware of: For CircleCi to run our Fabric deployment script (and therefore connect to our server) it needs to have a public/private key configured. This is currently set up. You will see a root@circleci public key within authorized_keys on both the production and staging server CircleCI needs environment variables to successfully build the API. These are configured via the CircleCI interface CircleCI needs to be able to pull the git repo from Bitbucket using password-less SSH access. This is configured via deployment hooks in the Bitbucket and CircleCI interfaces Manual deployment If the builds are not working, you'll need to connect to the server over SSH to see what the issue is. These are the commands needed to do an equivilant deploy manually on the server: cd find_hello_api workon find_hello git pull origin develop pip install -r requirements/production.txt python manage.py collectstatic --noinput python manage.py migrate supervisorctl restart find_hello Ionic app deployment This is a little bit more straightfoward than the API. CircleCI will automatically create new builds when the develop branch changes. Once CircleCI builds the application it then uses scp to transfer the assets files to our production or staging server where they are served directly by Nginx. To deploy manually, follow the same process. Locally build the app with: ionic build --prod --release The built webapp will be placed in a www folder which can then be copied over to the production API AWS instance (both the API and Ionic app are hosted on the same instance).","title":"Web app deployment"},{"location":"FindHello%20Deployment/web-deploy/#web-deployment","text":"~Both the Django API and the Ionic app are configured to be automatically deployed to the web using CircleCI~. Deploying the REST API and Ionic app is mostly handled by CircleCI. Currently, the following are automatically deployed: Staging Django API ( develop branch) Production Django API ( master branch) Staging Ionic web app ( develop branch) Notably, the production Ionic app is not automatically deployed (the master branch) so much be manually deployed.","title":"Web Deployment"},{"location":"FindHello%20Deployment/web-deploy/#git","text":"The easiest way to develop and release new features is to use a \"Gitflow\" style approach. Create a new feature branch , for example feature/new-nav , and work locally within this branch until it is ready to test. When ready to test on the staging server, you merge this feature branch with the develop branch either via a pull request or standard merge. CircleCI will detect this change an run a new build to: https://resources.staging.usahello.org . Once that has been tested and is OK, then you create another pull request from develop into master . https://resources.usahello.org","title":"Git"},{"location":"FindHello%20Deployment/web-deploy/#django-api-deployment","text":"","title":"Django API deployment"},{"location":"FindHello%20Deployment/web-deploy/#circleci-config","text":"You can see how CircleCI is configured in the .circleci/config.yml file in the repo: https://bitbucket.org/findhello/find-hello-api/src/master/.circleci/","title":"CircleCI config"},{"location":"FindHello%20Deployment/web-deploy/#fabric-config","text":"There is a second configuration file .circleci/deploy.py . This is the Fabric deployment script. Fabric is a Python library that helps make deployments over SSH. In our case, once our CircleCI has created the build, it then runs the Fabric script which in-turn connects to our server and carries out a number of commands to pull the latest code. A few things to be aware of: For CircleCi to run our Fabric deployment script (and therefore connect to our server) it needs to have a public/private key configured. This is currently set up. You will see a root@circleci public key within authorized_keys on both the production and staging server CircleCI needs environment variables to successfully build the API. These are configured via the CircleCI interface CircleCI needs to be able to pull the git repo from Bitbucket using password-less SSH access. This is configured via deployment hooks in the Bitbucket and CircleCI interfaces","title":"Fabric config"},{"location":"FindHello%20Deployment/web-deploy/#manual-deployment","text":"If the builds are not working, you'll need to connect to the server over SSH to see what the issue is. These are the commands needed to do an equivilant deploy manually on the server: cd find_hello_api workon find_hello git pull origin develop pip install -r requirements/production.txt python manage.py collectstatic --noinput python manage.py migrate supervisorctl restart find_hello","title":"Manual deployment"},{"location":"FindHello%20Deployment/web-deploy/#ionic-app-deployment","text":"This is a little bit more straightfoward than the API. CircleCI will automatically create new builds when the develop branch changes. Once CircleCI builds the application it then uses scp to transfer the assets files to our production or staging server where they are served directly by Nginx. To deploy manually, follow the same process. Locally build the app with: ionic build --prod --release The built webapp will be placed in a www folder which can then be copied over to the production API AWS instance (both the API and Ionic app are hosted on the same instance).","title":"Ionic app deployment"},{"location":"FindHello%20Development/","text":"Development Overview Frontend The frontend has been developed with the Ionic v5. Ionic uses Apache Cordova v9 behind the scenes as well as Angular v10 as the Javascript frontend framework. Backend The backend API has been developed with the Django framework and uses a number of plugins, included Django Rest Framework and GeoDjango . You can see the full list of dependencies in the app's requirements folder","title":"Overview"},{"location":"FindHello%20Development/#development-overview","text":"","title":"Development Overview"},{"location":"FindHello%20Development/#frontend","text":"The frontend has been developed with the Ionic v5. Ionic uses Apache Cordova v9 behind the scenes as well as Angular v10 as the Javascript frontend framework.","title":"Frontend"},{"location":"FindHello%20Development/#backend","text":"The backend API has been developed with the Django framework and uses a number of plugins, included Django Rest Framework and GeoDjango . You can see the full list of dependencies in the app's requirements folder","title":"Backend"},{"location":"FindHello%20Development/api-setup/","text":"API Setup The Django app can be setup either manually (installing Python, virtualenv , Postgres etc.) or using Docker. Prerequisites Before setting up the project, there's a few things you need to do first. Clone the repo The first step is to clone the repo to you machine: git clone git@bitbucket.org:findhello/find-hello-api.git cd find-hello-api Download Geo database The API uses GeoDjango which is an optional library within the Django ecosystem for dealing with GIS. We need a geo database to use GeoDjango so this step downloads this database. Visit this page and download \"GeoLite2 City\" (Maxmind DB format) database and unzip it. Create a geofiles/ directory in the root of the repo and place the .mmdb in there so that the path is geofiles/GeoLite2-City.mmdb Environment variables Create a .env in the root of the repo with the following: DJANGO_SECRET_KEY=\"secret\" DATABASE_URL=postgresql://find_hello_api:find_hello_api@localhost/find_hello_api Docker setup Make sure you have Docker installed on your machine . On Ubuntu this should be easy: sudo apt-get install docker docker-compose On Windows of Mac, you need to install the Docker desktop pacakges from here: https://docs.docker.com/engine/installation/ First build the Docker images (this will take a while): docker-compose -f local.yml build then start the Docker containers: docker-compose -f local.yml up This should automatically start everything required to work on the site. Launch the browser at: http://localhost:8000 Setup a new user and load some fixtures: docker-compose -f local.yml run --rm django python manage.py createsuperuser docker-compose -f local.yml run --rm django python manage.py loaddata find_hello/location/fixtures/categories.json docker-compose -f local.yml run --rm django python manage.py loaddata find_hello/location/fixtures/groups.json Docker issues Resetting the database If you have any issues with the database that Docker creates, you can reset it: docker-compose -f local.yml down docker volume rm find-hello-api_postgres_backup_local docker volume rm find-hello-api_postgres_data_local docker-compose -f local.yml up --build docker-compose -f local.yml run --rm django python manage.py createsuperuser docker-compose -f local.yml run --rm django python manage.py loaddata find_hello/location/fixtures/categories.json docker-compose -f local.yml run --rm django python manage.py loaddata find_hello/location/fixtures/groups.json Manual setup Docker can be hard to work with at times, making it difficult to debug issues. An alternative is to run the app natively on your machine instead of with Docker containers. This assumes that you have Python 3 installed on your machine. The following steps are for MacOS. Virtualenv Install virtualenv and virtualenvwrapper . These are Python apps that allow you to set up isolated Python environments, a bit like a rudimentary Docker but for Python. > pip3 install virtualenv virtualenvwrapper and add the following to the top of your ~/.bashrc to configure virtualenv: export WORKON_HOME=$HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh and create a new virtualenv for the API: > mkvirtualenv find-hello-api --python=python3 To \"activate\" the virtualenv use the following command: > cdvirtualenv find-hello-api and to \"deactivate\" (so that you revert to using the system Python) use (although don't do this now, as you need to have your new virtualenv activated): > deactivate Postgres You will need to have an instance of Postgres 9.6 database set up locally on your machine. For MacOS, the easiest option is to use Postgres.app . Alternatively you can install Postgres with brew (but you need to make sure it's 9.6). You will also need PostGIS available (which adds GIS support to the Postgresql database). So, if you've installed Postgres via brew, then you will also need: > brew install postgis gdal libgeoip If you've installed Postgres.app, it should already have PostGIS included. Create a database: > psql > create database find_hello_api; > create user find_hello_api with password 'find_hello_api'; > grant all privileges on database find_hello_api to find_hello_api; > \\c find_hello_api > create extension postgis; > create extension fuzzystrmatch; > create extension postgis_tiger_geocoder; Python First you need to add the repo to the Python path. Add the entire repo to the path using: > add2virtualenv /path/to/where/you/git/clones/find-hello-api and reactivate: > workon find-hello-api Install all requirements: > pip install -r requirements/local.txt Set up the database: > python manage.py migrate And create a new superuser: > python manage.py createsuperuser Load some fixtures: > python manage.py loaddata find_hello/location/fixtures/categories.json > python manage.py loaddata find_hello/location/fixtures/groups.json And run the development server: python manage.py runserver You will now be able to see the API via http://localhost:8000 and the admin dashboard via http://localhost:8000/admin-dashboard/","title":"API setup"},{"location":"FindHello%20Development/api-setup/#api-setup","text":"The Django app can be setup either manually (installing Python, virtualenv , Postgres etc.) or using Docker.","title":"API Setup"},{"location":"FindHello%20Development/api-setup/#prerequisites","text":"Before setting up the project, there's a few things you need to do first.","title":"Prerequisites"},{"location":"FindHello%20Development/api-setup/#clone-the-repo","text":"The first step is to clone the repo to you machine: git clone git@bitbucket.org:findhello/find-hello-api.git cd find-hello-api","title":"Clone the repo"},{"location":"FindHello%20Development/api-setup/#download-geo-database","text":"The API uses GeoDjango which is an optional library within the Django ecosystem for dealing with GIS. We need a geo database to use GeoDjango so this step downloads this database. Visit this page and download \"GeoLite2 City\" (Maxmind DB format) database and unzip it. Create a geofiles/ directory in the root of the repo and place the .mmdb in there so that the path is geofiles/GeoLite2-City.mmdb","title":"Download Geo database"},{"location":"FindHello%20Development/api-setup/#environment-variables","text":"Create a .env in the root of the repo with the following: DJANGO_SECRET_KEY=\"secret\" DATABASE_URL=postgresql://find_hello_api:find_hello_api@localhost/find_hello_api","title":"Environment variables"},{"location":"FindHello%20Development/api-setup/#docker-setup","text":"Make sure you have Docker installed on your machine . On Ubuntu this should be easy: sudo apt-get install docker docker-compose On Windows of Mac, you need to install the Docker desktop pacakges from here: https://docs.docker.com/engine/installation/ First build the Docker images (this will take a while): docker-compose -f local.yml build then start the Docker containers: docker-compose -f local.yml up This should automatically start everything required to work on the site. Launch the browser at: http://localhost:8000 Setup a new user and load some fixtures: docker-compose -f local.yml run --rm django python manage.py createsuperuser docker-compose -f local.yml run --rm django python manage.py loaddata find_hello/location/fixtures/categories.json docker-compose -f local.yml run --rm django python manage.py loaddata find_hello/location/fixtures/groups.json","title":"Docker setup"},{"location":"FindHello%20Development/api-setup/#docker-issues","text":"","title":"Docker issues"},{"location":"FindHello%20Development/api-setup/#resetting-the-database","text":"If you have any issues with the database that Docker creates, you can reset it: docker-compose -f local.yml down docker volume rm find-hello-api_postgres_backup_local docker volume rm find-hello-api_postgres_data_local docker-compose -f local.yml up --build docker-compose -f local.yml run --rm django python manage.py createsuperuser docker-compose -f local.yml run --rm django python manage.py loaddata find_hello/location/fixtures/categories.json docker-compose -f local.yml run --rm django python manage.py loaddata find_hello/location/fixtures/groups.json","title":"Resetting the database"},{"location":"FindHello%20Development/api-setup/#manual-setup","text":"Docker can be hard to work with at times, making it difficult to debug issues. An alternative is to run the app natively on your machine instead of with Docker containers. This assumes that you have Python 3 installed on your machine. The following steps are for MacOS.","title":"Manual setup"},{"location":"FindHello%20Development/api-setup/#virtualenv","text":"Install virtualenv and virtualenvwrapper . These are Python apps that allow you to set up isolated Python environments, a bit like a rudimentary Docker but for Python. > pip3 install virtualenv virtualenvwrapper and add the following to the top of your ~/.bashrc to configure virtualenv: export WORKON_HOME=$HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh and create a new virtualenv for the API: > mkvirtualenv find-hello-api --python=python3 To \"activate\" the virtualenv use the following command: > cdvirtualenv find-hello-api and to \"deactivate\" (so that you revert to using the system Python) use (although don't do this now, as you need to have your new virtualenv activated): > deactivate","title":"Virtualenv"},{"location":"FindHello%20Development/api-setup/#postgres","text":"You will need to have an instance of Postgres 9.6 database set up locally on your machine. For MacOS, the easiest option is to use Postgres.app . Alternatively you can install Postgres with brew (but you need to make sure it's 9.6). You will also need PostGIS available (which adds GIS support to the Postgresql database). So, if you've installed Postgres via brew, then you will also need: > brew install postgis gdal libgeoip If you've installed Postgres.app, it should already have PostGIS included. Create a database: > psql > create database find_hello_api; > create user find_hello_api with password 'find_hello_api'; > grant all privileges on database find_hello_api to find_hello_api; > \\c find_hello_api > create extension postgis; > create extension fuzzystrmatch; > create extension postgis_tiger_geocoder;","title":"Postgres"},{"location":"FindHello%20Development/api-setup/#python","text":"First you need to add the repo to the Python path. Add the entire repo to the path using: > add2virtualenv /path/to/where/you/git/clones/find-hello-api and reactivate: > workon find-hello-api Install all requirements: > pip install -r requirements/local.txt Set up the database: > python manage.py migrate And create a new superuser: > python manage.py createsuperuser Load some fixtures: > python manage.py loaddata find_hello/location/fixtures/categories.json > python manage.py loaddata find_hello/location/fixtures/groups.json And run the development server: python manage.py runserver You will now be able to see the API via http://localhost:8000 and the admin dashboard via http://localhost:8000/admin-dashboard/","title":"Python"},{"location":"FindHello%20Development/app-setup/","text":"App Setup The app requires node and ionic-cli to run. The easiest way to install Node is with nvm (Node version manager) . This allows you to install different versions of Node. Once nvm is installed, install Node v8.15.0 (this is the version tested with the repo) nvm install 12.10.0 We then need to install Ionic and Cordova globally: npm install -g @ionic/cli (being aware of the versions of each) and then install all dependencies: npm install You then need to edit a environment.ts file in the src/environments of the repo with some environment variables: API_URL=\"http://localhost:8000\" GOOGLE_MAPS_API_KEY (lookup in Google cloud account) Note that in the above file, the API is running on the local machine. You can change this value to https://resources.staging.therefugeecenter.org if you want your local app instance to use the staging server instead. Furthremore, you will need to update this value when you are building, running or emulating the app as a native mobile app. Finally you can run the web app locally with: ionic serve","title":"App setup"},{"location":"FindHello%20Development/app-setup/#app-setup","text":"The app requires node and ionic-cli to run. The easiest way to install Node is with nvm (Node version manager) . This allows you to install different versions of Node. Once nvm is installed, install Node v8.15.0 (this is the version tested with the repo) nvm install 12.10.0 We then need to install Ionic and Cordova globally: npm install -g @ionic/cli (being aware of the versions of each) and then install all dependencies: npm install You then need to edit a environment.ts file in the src/environments of the repo with some environment variables: API_URL=\"http://localhost:8000\" GOOGLE_MAPS_API_KEY (lookup in Google cloud account) Note that in the above file, the API is running on the local machine. You can change this value to https://resources.staging.therefugeecenter.org if you want your local app instance to use the staging server instead. Furthremore, you will need to update this value when you are building, running or emulating the app as a native mobile app. Finally you can run the web app locally with: ionic serve","title":"App Setup"},{"location":"FindHello%20Development/mobile-setup-old/","text":"Mobile Setup To build the Ionic app for iOS and Android you have to have a number of dependencies installed and these can be difficult to configure correctly. At a high level we will be using the Ionic CLIs cordova command to build test and release versions of the iOS and Android app. For example: > ionic cordova build android --prod --release You can use this command to create builds for development testing or production, to run the app locally on a connected phone or to run on either the Android or iOS emulator. The following instructions are for MacOS. Cordova First, make sure Cordova is installed: npm install -g cordova Android Instead of installing the entire Android studio we're going to install the SDK separately which gives us the tools required to build the app without the need for the entire editor. It it easier to configure and use the SDK outside of Android Studio. We need to also install the Java SDK and runtime as well as some Java build tools (primarily gradle) that Cordova will use to build the app. Java 8 SDK The first thing to install is the Java 8 JDK and runtime. For MacOS go to: https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html and download for Mac OS X x64 (\"Java SE Development Kit 8u191\") Android build tools These are tools used by Cordova to build the Android app. Install the following with brew : brew install gradle ant maven and add these configuration variables to your shell: vim ~/.bashrc add: # Android build tools export GRADLE_HOME=/usr/local/opt/gradle export ANT_HOME=/usr/local/opt/ant export MAVEN_HOME=/usr/local/opt/maven ... Android SDK Now install the SDK: brew tap homebrew/cask brew cask install android-sdk Then need to now add the SDK to your path so that Cordova can find it: vim ~/.bashrc add # Android SDK export ANDROID_HOME=/usr/local/share/android-sdk export PATH=$PATH:$ANDROID_HOME/emulator export PATH=$PATH:$ANDROID_HOME/tools export PATH=$PATH:$ANDROID_HOME/platform-tools export PATH=$PATH:$ANDROID_HOME/bin ... (Note that it's important to place the emulator folder above the tools folder to avoid problems later with emulators) Troubleshooting: Issue with emulator paths When installing the android-sdk it looks like it automatically symlinks a lot of the tools from the brew directory to /usr/local/bin . You can see this with: ls -la /usr/local/bin | grep android But we are already adding them to the path via our .bashrc . There was an issue with the emulator command being linked from /usr/local/Caskroom/android-sdk/4333796/tools/ instead of /usr/local/Caskroom/android-sdk/4333796/emulators/ The easiest thing is to just delete the symlinks and allow our path changes to sort the issue: cd /usr/local/bin rm -rf android archquery avdmanager emulator emulator-check jobb lint mksdcard monitor monkeyrunner screenshot2 sdkmanager uiautomatorviewer Android target platform We now need to install an Android target platform using the Android SDK: sdkmanager \"platform-tools\" \"platforms;android-26\" sdkmanager \"build-tools;26.0.1\" Cordova platform We can now tell Cordova to set up the Android platform in our project: ionic cordova platform add android or to specify a particular version: ionic cordova platform add android@X.X.X Bear in mind that this is the cordova-android version, not the android version . You can see more here: https://cordova.apache.org/docs/en/latest/guide/platforms/android/#requirements-and-support https://stackoverflow.com/a/28678292/396300 Check requirements At this point, doing the following should show that everything is in order for Android. ionic cordova requirements https://stackoverflow.com/a/41771566/396300 Create a build We should now be able to build the application for Android using: ionic cordova build android This will create a new unsigned APK (the bundle that is created by the build and that can be run directly on an Android device) Run on device If you have an Android device connected to your laptop, you should be able to instruct Cordova to install and run the app automatically on the attached device using: ionic cordova android run There is also a live-reload flag that in theory allows you to make changes and have them appear in real time: ionic cordova android run -lc but it's not very reliable. Environment variables when running on device When running the app on a device (and have the API running on your machine), remember that you will have to update the API_URL in the environment.ts before running the build. You need to find the IP of the machine running the API on your local network and use this as the API_URL . You can use the ifconfig command for this. Run on Emulator You can also run the app on your machine via an emulator. First download a system image to use for emulation: sdkmanager \"system-images;android-26;google_apis;x86\" Create a new device: avdmanager create avd -n test-device -k \"system-images;android-26;google_apis;x86\" -b x86 -c 100M -d 7 -f And run it: emulator @test-device https://stackoverflow.com/questions/43275238/how-to-set-system-images-path-when-creating-an-android-avd You can then check what's installed: sdkmanager --list You should now be able to run: ionic cordova emulate android Again, there is also a live-reload flag that in theory allows you to make changes and have them appear in real time: ionic cordova android emulate -lc but it's not very reliable. Emulator environment variables When running the app on an emulator (and have the API running on your machine), remember that you will have to update the API_URL in the environment.ts before running the emulator. The value you should use is 10.0.2.2:8000/ which is the default IP for the emulator. Debugging To debug the native Android app, you can use Chrome's remote debugging tools to connect to the webview that is running within the app on either the emulator or the device. This allows you to get access to all of the regular dev-tools that you would otherwise use to debug the web app. Here's a description of this process: https://ionic.zone/debug/remote-debug-your-app Troubleshooting: Issue with Chrome remote debugging tools Unfortunately I've noticed a problem running the remote dev tools from Chrome/Chromium that is apparently something to do with newer versions of the browser that are greater then release M63. You will notice that the dev-tools window is mostly blank and you can't use them. TLDR You need an old version of Chromium to use the remote debugger properly. Here's a link to a download: https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Mac/499098/ Here is the issue discussed: https://groups.google.com/forum/#!topic/google-chrome-developer-tools/qWg3OAGUIOY If you need to download another version, first find the version you want (a version < 63) by looking in tags in the repo e.g 62.0.3202.0 : https://chromium.googlesource.com/chromium/src/ or just Wikipedia: https://en.wikipedia.org/wiki/Google_Chrome_version_history Now follow the guide at the bottom to get the version: https://www.chromium.org/getting-involved/download-chromium First search the version here: https://omahaproxy.appspot.com/ Which will give you a Branch Base Position: 499098 Now look that up in the \"filter box\": https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Mac/499098/ Sharing build for testing With Android, as long as your device is configured to run unsigned APKs, you can simply send someone the generated APK file in: ./platforms/android/app/build/outputs/apk/debug/app-debug.apk The Google Play Console also has the ability to deploy test builds as part of your release strategy. iOS Getting the iOS platform set up is much easier than Android. First, you need to make sure you are on a Mac and have Xcode installed. Command line tools You need to make sure you have Xcode's \"command line tools\" installed: xcode-select --install Cordova platform We can now tell Cordova to set up the iOS platform in our project: ionic cordova platform add ios Create a build We should now be able to build the application for iOS using: ionic cordova ios build Unlike Android, this doesn't create an APK or bundle that can be run directly on a device. Instead it generates an Xcode project within the ./platforms/ios/ folder that we can now open with Xcode. Running and emulating Open the Xcode project at ./platforms/ios/FindHello.xcodeproj This will allow you to run the application on an emulator from within Xcode, or select any physical device you have connected to your machine, and run the app on that. To do this, you just choose your destination in \"FindHello > ...\" from the top left button in the top bar (to the right of the play button) Alternatively, you can try to use the ionic cordova run ios and ionic cordova emulate ios to skip Xcode, but I find this approach to be buggy and unreliable. Like Android, you can also add the -lc flag to try get real time live reloads, but it's also buggy. Sharing builds Unlike Android, you can't simply share a build once you've built it locally. Instead, Apple require you to create an \"archive\" (this is the equivilant of the Android \"APK\"). Then there are two approaches to sharing builds for testing: Over the air You generate an archive and upload it to a server you control. You then set up a simple web page that can be reached from your web browser on your iOSdevice (has to be Safari). This web page tells Safari where to download the archive. Safari automatically handles this process. We're not using this approach as it's complicated and buggy See more at https://help.apple.com/deployment/ios/#/apda0e3426d7 Test Flight This is an application you can download onto your iOS device that allows you to receive test builds of an application. This requires your App Store Connect account is set up. See more at https://blog.ionicframework.com/using-testflight-for-user-testing-with-ionic/","title":"Mobile Setup"},{"location":"FindHello%20Development/mobile-setup-old/#mobile-setup","text":"To build the Ionic app for iOS and Android you have to have a number of dependencies installed and these can be difficult to configure correctly. At a high level we will be using the Ionic CLIs cordova command to build test and release versions of the iOS and Android app. For example: > ionic cordova build android --prod --release You can use this command to create builds for development testing or production, to run the app locally on a connected phone or to run on either the Android or iOS emulator. The following instructions are for MacOS.","title":"Mobile Setup"},{"location":"FindHello%20Development/mobile-setup-old/#cordova","text":"First, make sure Cordova is installed: npm install -g cordova","title":"Cordova"},{"location":"FindHello%20Development/mobile-setup-old/#android","text":"Instead of installing the entire Android studio we're going to install the SDK separately which gives us the tools required to build the app without the need for the entire editor. It it easier to configure and use the SDK outside of Android Studio. We need to also install the Java SDK and runtime as well as some Java build tools (primarily gradle) that Cordova will use to build the app.","title":"Android"},{"location":"FindHello%20Development/mobile-setup-old/#java-8-sdk","text":"The first thing to install is the Java 8 JDK and runtime. For MacOS go to: https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html and download for Mac OS X x64 (\"Java SE Development Kit 8u191\")","title":"Java 8 SDK"},{"location":"FindHello%20Development/mobile-setup-old/#android-build-tools","text":"These are tools used by Cordova to build the Android app. Install the following with brew : brew install gradle ant maven and add these configuration variables to your shell: vim ~/.bashrc add: # Android build tools export GRADLE_HOME=/usr/local/opt/gradle export ANT_HOME=/usr/local/opt/ant export MAVEN_HOME=/usr/local/opt/maven ...","title":"Android build tools"},{"location":"FindHello%20Development/mobile-setup-old/#android-sdk","text":"Now install the SDK: brew tap homebrew/cask brew cask install android-sdk Then need to now add the SDK to your path so that Cordova can find it: vim ~/.bashrc add # Android SDK export ANDROID_HOME=/usr/local/share/android-sdk export PATH=$PATH:$ANDROID_HOME/emulator export PATH=$PATH:$ANDROID_HOME/tools export PATH=$PATH:$ANDROID_HOME/platform-tools export PATH=$PATH:$ANDROID_HOME/bin ... (Note that it's important to place the emulator folder above the tools folder to avoid problems later with emulators)","title":"Android SDK"},{"location":"FindHello%20Development/mobile-setup-old/#troubleshooting-issue-with-emulator-paths","text":"When installing the android-sdk it looks like it automatically symlinks a lot of the tools from the brew directory to /usr/local/bin . You can see this with: ls -la /usr/local/bin | grep android But we are already adding them to the path via our .bashrc . There was an issue with the emulator command being linked from /usr/local/Caskroom/android-sdk/4333796/tools/ instead of /usr/local/Caskroom/android-sdk/4333796/emulators/ The easiest thing is to just delete the symlinks and allow our path changes to sort the issue: cd /usr/local/bin rm -rf android archquery avdmanager emulator emulator-check jobb lint mksdcard monitor monkeyrunner screenshot2 sdkmanager uiautomatorviewer","title":"Troubleshooting: Issue with emulator paths"},{"location":"FindHello%20Development/mobile-setup-old/#android-target-platform","text":"We now need to install an Android target platform using the Android SDK: sdkmanager \"platform-tools\" \"platforms;android-26\" sdkmanager \"build-tools;26.0.1\"","title":"Android target platform"},{"location":"FindHello%20Development/mobile-setup-old/#cordova-platform","text":"We can now tell Cordova to set up the Android platform in our project: ionic cordova platform add android or to specify a particular version: ionic cordova platform add android@X.X.X Bear in mind that this is the cordova-android version, not the android version . You can see more here: https://cordova.apache.org/docs/en/latest/guide/platforms/android/#requirements-and-support https://stackoverflow.com/a/28678292/396300","title":"Cordova platform"},{"location":"FindHello%20Development/mobile-setup-old/#check-requirements","text":"At this point, doing the following should show that everything is in order for Android. ionic cordova requirements https://stackoverflow.com/a/41771566/396300","title":"Check requirements"},{"location":"FindHello%20Development/mobile-setup-old/#create-a-build","text":"We should now be able to build the application for Android using: ionic cordova build android This will create a new unsigned APK (the bundle that is created by the build and that can be run directly on an Android device)","title":"Create a build"},{"location":"FindHello%20Development/mobile-setup-old/#run-on-device","text":"If you have an Android device connected to your laptop, you should be able to instruct Cordova to install and run the app automatically on the attached device using: ionic cordova android run There is also a live-reload flag that in theory allows you to make changes and have them appear in real time: ionic cordova android run -lc but it's not very reliable.","title":"Run on device"},{"location":"FindHello%20Development/mobile-setup-old/#environment-variables-when-running-on-device","text":"When running the app on a device (and have the API running on your machine), remember that you will have to update the API_URL in the environment.ts before running the build. You need to find the IP of the machine running the API on your local network and use this as the API_URL . You can use the ifconfig command for this.","title":"Environment variables when running on device"},{"location":"FindHello%20Development/mobile-setup-old/#run-on-emulator","text":"You can also run the app on your machine via an emulator. First download a system image to use for emulation: sdkmanager \"system-images;android-26;google_apis;x86\" Create a new device: avdmanager create avd -n test-device -k \"system-images;android-26;google_apis;x86\" -b x86 -c 100M -d 7 -f And run it: emulator @test-device https://stackoverflow.com/questions/43275238/how-to-set-system-images-path-when-creating-an-android-avd You can then check what's installed: sdkmanager --list You should now be able to run: ionic cordova emulate android Again, there is also a live-reload flag that in theory allows you to make changes and have them appear in real time: ionic cordova android emulate -lc but it's not very reliable.","title":"Run on Emulator"},{"location":"FindHello%20Development/mobile-setup-old/#emulator-environment-variables","text":"When running the app on an emulator (and have the API running on your machine), remember that you will have to update the API_URL in the environment.ts before running the emulator. The value you should use is 10.0.2.2:8000/ which is the default IP for the emulator.","title":"Emulator environment variables"},{"location":"FindHello%20Development/mobile-setup-old/#debugging","text":"To debug the native Android app, you can use Chrome's remote debugging tools to connect to the webview that is running within the app on either the emulator or the device. This allows you to get access to all of the regular dev-tools that you would otherwise use to debug the web app. Here's a description of this process: https://ionic.zone/debug/remote-debug-your-app","title":"Debugging"},{"location":"FindHello%20Development/mobile-setup-old/#troubleshooting-issue-with-chrome-remote-debugging-tools","text":"Unfortunately I've noticed a problem running the remote dev tools from Chrome/Chromium that is apparently something to do with newer versions of the browser that are greater then release M63. You will notice that the dev-tools window is mostly blank and you can't use them. TLDR You need an old version of Chromium to use the remote debugger properly. Here's a link to a download: https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Mac/499098/ Here is the issue discussed: https://groups.google.com/forum/#!topic/google-chrome-developer-tools/qWg3OAGUIOY If you need to download another version, first find the version you want (a version < 63) by looking in tags in the repo e.g 62.0.3202.0 : https://chromium.googlesource.com/chromium/src/ or just Wikipedia: https://en.wikipedia.org/wiki/Google_Chrome_version_history Now follow the guide at the bottom to get the version: https://www.chromium.org/getting-involved/download-chromium First search the version here: https://omahaproxy.appspot.com/ Which will give you a Branch Base Position: 499098 Now look that up in the \"filter box\": https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Mac/499098/","title":"Troubleshooting: Issue with Chrome remote debugging tools"},{"location":"FindHello%20Development/mobile-setup-old/#sharing-build-for-testing","text":"With Android, as long as your device is configured to run unsigned APKs, you can simply send someone the generated APK file in: ./platforms/android/app/build/outputs/apk/debug/app-debug.apk The Google Play Console also has the ability to deploy test builds as part of your release strategy.","title":"Sharing build for testing"},{"location":"FindHello%20Development/mobile-setup-old/#ios","text":"Getting the iOS platform set up is much easier than Android. First, you need to make sure you are on a Mac and have Xcode installed.","title":"iOS"},{"location":"FindHello%20Development/mobile-setup-old/#command-line-tools","text":"You need to make sure you have Xcode's \"command line tools\" installed: xcode-select --install","title":"Command line tools"},{"location":"FindHello%20Development/mobile-setup-old/#cordova-platform_1","text":"We can now tell Cordova to set up the iOS platform in our project: ionic cordova platform add ios","title":"Cordova platform"},{"location":"FindHello%20Development/mobile-setup-old/#create-a-build_1","text":"We should now be able to build the application for iOS using: ionic cordova ios build Unlike Android, this doesn't create an APK or bundle that can be run directly on a device. Instead it generates an Xcode project within the ./platforms/ios/ folder that we can now open with Xcode.","title":"Create a build"},{"location":"FindHello%20Development/mobile-setup-old/#running-and-emulating","text":"Open the Xcode project at ./platforms/ios/FindHello.xcodeproj This will allow you to run the application on an emulator from within Xcode, or select any physical device you have connected to your machine, and run the app on that. To do this, you just choose your destination in \"FindHello > ...\" from the top left button in the top bar (to the right of the play button) Alternatively, you can try to use the ionic cordova run ios and ionic cordova emulate ios to skip Xcode, but I find this approach to be buggy and unreliable. Like Android, you can also add the -lc flag to try get real time live reloads, but it's also buggy.","title":"Running and emulating"},{"location":"FindHello%20Development/mobile-setup-old/#sharing-builds","text":"Unlike Android, you can't simply share a build once you've built it locally. Instead, Apple require you to create an \"archive\" (this is the equivilant of the Android \"APK\"). Then there are two approaches to sharing builds for testing:","title":"Sharing builds"},{"location":"FindHello%20Development/mobile-setup-old/#over-the-air","text":"You generate an archive and upload it to a server you control. You then set up a simple web page that can be reached from your web browser on your iOSdevice (has to be Safari). This web page tells Safari where to download the archive. Safari automatically handles this process. We're not using this approach as it's complicated and buggy See more at https://help.apple.com/deployment/ios/#/apda0e3426d7","title":"Over the air"},{"location":"FindHello%20Development/mobile-setup-old/#test-flight","text":"This is an application you can download onto your iOS device that allows you to receive test builds of an application. This requires your App Store Connect account is set up. See more at https://blog.ionicframework.com/using-testflight-for-user-testing-with-ionic/","title":"Test Flight"},{"location":"FindHello%20Development/mobile-setup/","text":"Mobile Setup At a high level we will be using the Ionic CLIs cordova command to build test and release versions of the iOS and Android app. For example: > ionic cordova build android --prod --release You can use this command to create builds for development testing or production, to run the app locally on a connected phone or to run on either the Android or iOS emulator. The following instructions are for MacOS M1. Node Make sure you have a recent version of node installed. I'm using 16. You can use nvm to manage Node versions: https://github.com/nvm-sh/nvm Cordova Make sure Cordova is installed: npm install -g cordova cordova-res native-run Android Here is the official guide: https://ionicframework.com/docs/developing/android We need a few things for Android, on M1 via Cordova: Java8: this is an issue as Oracle haven't made any M1-compatible releases for 8 Gradle: Maven: Build Tools My understanding is that you have to install Gradle, Ant and Maven separately to Android Studio. brew install gradle ant maven Now add to the ~/.zshrc : export GRADLE_HOME=/opt/homebrew/opt/gradle export ANT_HOME=/opt/homebrew/opt/ant export MAVEN_HOME=/opt/homebrew/opt/maven Java8 You can get a version via Azul (a separate company to Oracle). See this guide: https://dev.to/shane/configure-m1-mac-to-use-jdk8-with-maven-4b4g Download Java8 here: https://www.azul.com/downloads/?version=java-8-lts&os=macos&architecture=arm-64-bit&package=jdk#download-openjdk You need then add the Java Home to your ~/.bashrc : export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre Android Studio Install the arm64 version of Android Studio here: https://developer.android.com/studio#downloads Add the following to your ~/.bashrc , updating your home directory: # Android SDK export ANDROID_SDK_ROOT=/Users/timmyomahony/Library/Android/sdk export PATH=$PATH:$ANDROID_SDK_ROOT/emulator export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools Run: source ~/.bashrc Android SDK Platform We need the Android SDK Platform 28 installed. Go to Preferences > Appearance and Behaviour > System Settings > Android SDK and select Android 9.0 (API level 28) and download Android Emulator First you need to download an Android image. On the same dialog as above, click \"Show Package Details\" and select Google APIs ARM 64 v8a System Image . Hit Apply to download the system image. Device Manager On the \"Welcome to Android Studio\" screen, hit the \"More Actions\" and \"Virtual Device Manager\". Create a new device: Choose Pixel 5 Choose \"Pie\" (this is the image downloaded previously) Cordova Platform You should be able to add Android as a platform now: ionic cordova platform add android Check Requirements You can check the requirements for Ionic now: ionic cordova requirements It should look like: Requirements check results for android: Java JDK: installed 1.8.0 Android SDK: installed true Android target: installed android-30,android-28 Gradle: installed /opt/homebrew/Cellar/gradle/7.4.2/bin/gradle Run via Emulator You should be able to test on the emulator now. First make sure the emulator is running (i.e. manually start it in Android Studio) then run: ionic cordova emulate android Troubleshooting Make sure you have the right environment variables set Make sure nothing is listening on port 5555 or it will appear as a device Apple On an M1 machine, I haven't been able to the app to run on a simulator, I've only been able to run it on a connected iPhone. See below for more details. In general, the approach here is to build within XCode (as opposed to building via the Cordova CLI). CocoaPods Install CocoaPods: sudo gem install cocoapods You might need rvm installed to get a newer version of Ruby than the MacOS system version. Cordova Platform You should be able to add iOS as a platform now: ionic cordova platform add ios Configure Xcode Open Xcode, Preferences > Locations and make sure \"Command Line Tools\" is set to the installed version of Xcode Run via iPhone Connect iPhone via USB and open platforms/ios/FindHello.xcworkspace (not FindHello.xcodeproj ) in Xcode. Click the project in the sidebar and hit \"Signing & Capabilities\". Sign in and make sure the right team is selected. Select the iPhone and build to it. Attempting to Run via Simulator If you try build for a simulator on an M1, you get a build error in XCode, something like: in /Users/timmyomahony/Repositories/find-hello-app/platforms/ios/Pods/FirebaseAnalytics/Frameworks/FIRAnalyticsConnector.framework/FIRAnalyticsConnector(FIRAnalyticsConnector_e321ed8e3db06efc9803f6c008e67a34.o), building for iOS Simulator, but linking in object file built for iOS, file '/Users/timmyomahony/Repositories/find-hello-app/platforms/ios/Pods/FirebaseAnalytics/Frameworks/FIRAnalyticsConnector.framework/FIRAnalyticsConnector' for architecture arm64 https://stackoverflow.com/questions/63607158/xcode-building-for-ios-simulator-but-linking-in-an-object-file-built-for-ios-f The fix in the above link may work, but it causes a huge number of additional errors that I can't fix. https://stackoverflow.com/questions/65287834/tons-of-errors-due-to-set-arm64-in-excluded-architectures-in-ios-14-2-simulators","title":"Mobile setup"},{"location":"FindHello%20Development/mobile-setup/#mobile-setup","text":"At a high level we will be using the Ionic CLIs cordova command to build test and release versions of the iOS and Android app. For example: > ionic cordova build android --prod --release You can use this command to create builds for development testing or production, to run the app locally on a connected phone or to run on either the Android or iOS emulator. The following instructions are for MacOS M1.","title":"Mobile Setup"},{"location":"FindHello%20Development/mobile-setup/#node","text":"Make sure you have a recent version of node installed. I'm using 16. You can use nvm to manage Node versions: https://github.com/nvm-sh/nvm","title":"Node"},{"location":"FindHello%20Development/mobile-setup/#cordova","text":"Make sure Cordova is installed: npm install -g cordova cordova-res native-run","title":"Cordova"},{"location":"FindHello%20Development/mobile-setup/#android","text":"Here is the official guide: https://ionicframework.com/docs/developing/android We need a few things for Android, on M1 via Cordova: Java8: this is an issue as Oracle haven't made any M1-compatible releases for 8 Gradle: Maven:","title":"Android"},{"location":"FindHello%20Development/mobile-setup/#build-tools","text":"My understanding is that you have to install Gradle, Ant and Maven separately to Android Studio. brew install gradle ant maven Now add to the ~/.zshrc : export GRADLE_HOME=/opt/homebrew/opt/gradle export ANT_HOME=/opt/homebrew/opt/ant export MAVEN_HOME=/opt/homebrew/opt/maven","title":"Build Tools"},{"location":"FindHello%20Development/mobile-setup/#java8","text":"You can get a version via Azul (a separate company to Oracle). See this guide: https://dev.to/shane/configure-m1-mac-to-use-jdk8-with-maven-4b4g Download Java8 here: https://www.azul.com/downloads/?version=java-8-lts&os=macos&architecture=arm-64-bit&package=jdk#download-openjdk You need then add the Java Home to your ~/.bashrc : export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre","title":"Java8"},{"location":"FindHello%20Development/mobile-setup/#android-studio","text":"Install the arm64 version of Android Studio here: https://developer.android.com/studio#downloads Add the following to your ~/.bashrc , updating your home directory: # Android SDK export ANDROID_SDK_ROOT=/Users/timmyomahony/Library/Android/sdk export PATH=$PATH:$ANDROID_SDK_ROOT/emulator export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools Run: source ~/.bashrc","title":"Android Studio"},{"location":"FindHello%20Development/mobile-setup/#android-sdk-platform","text":"We need the Android SDK Platform 28 installed. Go to Preferences > Appearance and Behaviour > System Settings > Android SDK and select Android 9.0 (API level 28) and download","title":"Android SDK Platform"},{"location":"FindHello%20Development/mobile-setup/#android-emulator","text":"First you need to download an Android image. On the same dialog as above, click \"Show Package Details\" and select Google APIs ARM 64 v8a System Image . Hit Apply to download the system image.","title":"Android Emulator"},{"location":"FindHello%20Development/mobile-setup/#device-manager","text":"On the \"Welcome to Android Studio\" screen, hit the \"More Actions\" and \"Virtual Device Manager\". Create a new device: Choose Pixel 5 Choose \"Pie\" (this is the image downloaded previously)","title":"Device Manager"},{"location":"FindHello%20Development/mobile-setup/#cordova-platform","text":"You should be able to add Android as a platform now: ionic cordova platform add android","title":"Cordova Platform"},{"location":"FindHello%20Development/mobile-setup/#check-requirements","text":"You can check the requirements for Ionic now: ionic cordova requirements It should look like: Requirements check results for android: Java JDK: installed 1.8.0 Android SDK: installed true Android target: installed android-30,android-28 Gradle: installed /opt/homebrew/Cellar/gradle/7.4.2/bin/gradle","title":"Check Requirements"},{"location":"FindHello%20Development/mobile-setup/#run-via-emulator","text":"You should be able to test on the emulator now. First make sure the emulator is running (i.e. manually start it in Android Studio) then run: ionic cordova emulate android","title":"Run via Emulator"},{"location":"FindHello%20Development/mobile-setup/#troubleshooting","text":"Make sure you have the right environment variables set Make sure nothing is listening on port 5555 or it will appear as a device","title":"Troubleshooting"},{"location":"FindHello%20Development/mobile-setup/#apple","text":"On an M1 machine, I haven't been able to the app to run on a simulator, I've only been able to run it on a connected iPhone. See below for more details. In general, the approach here is to build within XCode (as opposed to building via the Cordova CLI).","title":"Apple"},{"location":"FindHello%20Development/mobile-setup/#cocoapods","text":"Install CocoaPods: sudo gem install cocoapods You might need rvm installed to get a newer version of Ruby than the MacOS system version.","title":"CocoaPods"},{"location":"FindHello%20Development/mobile-setup/#cordova-platform_1","text":"You should be able to add iOS as a platform now: ionic cordova platform add ios","title":"Cordova Platform"},{"location":"FindHello%20Development/mobile-setup/#configure-xcode","text":"Open Xcode, Preferences > Locations and make sure \"Command Line Tools\" is set to the installed version of Xcode","title":"Configure Xcode"},{"location":"FindHello%20Development/mobile-setup/#run-via-iphone","text":"Connect iPhone via USB and open platforms/ios/FindHello.xcworkspace (not FindHello.xcodeproj ) in Xcode. Click the project in the sidebar and hit \"Signing & Capabilities\". Sign in and make sure the right team is selected. Select the iPhone and build to it.","title":"Run via iPhone"},{"location":"FindHello%20Development/mobile-setup/#attempting-to-run-via-simulator","text":"If you try build for a simulator on an M1, you get a build error in XCode, something like: in /Users/timmyomahony/Repositories/find-hello-app/platforms/ios/Pods/FirebaseAnalytics/Frameworks/FIRAnalyticsConnector.framework/FIRAnalyticsConnector(FIRAnalyticsConnector_e321ed8e3db06efc9803f6c008e67a34.o), building for iOS Simulator, but linking in object file built for iOS, file '/Users/timmyomahony/Repositories/find-hello-app/platforms/ios/Pods/FirebaseAnalytics/Frameworks/FIRAnalyticsConnector.framework/FIRAnalyticsConnector' for architecture arm64 https://stackoverflow.com/questions/63607158/xcode-building-for-ios-simulator-but-linking-in-an-object-file-built-for-ios-f The fix in the above link may work, but it causes a huge number of additional errors that I can't fix. https://stackoverflow.com/questions/65287834/tons-of-errors-due-to-set-arm64-in-excluded-architectures-in-ios-14-2-simulators","title":"Attempting to Run via Simulator"},{"location":"FindHello%20Development/solr-setup/","text":"Solr Setup Install Solr Use brew to install solr: brew install solr This places the Solr home directory at /usr/local/Cellar/solr/8.2.0/server/solr/ Start it running locally: solr start Create a new core: solr create -c findhello-local -d _default Setup Django Haystack should already be installed in your local Django set up via the requirements files, but if not: pip install django-haystack Update your .env vars to make sure you are using the Solr backend and not the dummy search backend that is enabled by default: HAYSTACK_ADMIN_URL=\"http://127.0.0.1:8983/solr/\" HAYSTACK_URL=\"http://127.0.0.1:8983/solr/findhello-local/\" HAYSTACK_ENGINE=\"haystack.backends.solr_backend.SolrEngine\" Note that the URL points to the core, while the ADMIN_URL is just the default admin panel. Install existing schema.xml and solrconfig.xml Assuming you haven't made any changes to the search indexes, you can install the schema.xml file and solrconfig.xml file that are saved in the repo's etc folder: cp etc/solrschema.xml /usr/local/Cellar/solr/8.2.0/server/solr/findhello-local/conf/schema.xml cp etc/solrconfig.xml /usr/local/Cellar/solr/8.2.0/server/solr/findhello-local/conf/solrconfig.xml Then reload the core: curl 'http://127.0.0.1:8983/solr/admin/cores?action=RELOAD&core=findhello-local&wt=json' and rebuild the index: python manage.py rebuild_index Updating index (and therefore schema.xml and solrconfig.xml ) If you have made any changes to the search_indexes.py file, you will need to update the schema.xml and solrconfig.xml locally (and on the staging/production cores). After making your changes, run: python manage.py build_solr_schema -c /usr/local/Cellar/solr/8.2.0/server/solr/findhello-local/conf/ then copy the updated xml files to your repo: cp /usr/local/Cellar/solr/8.2.0/server/solr/mycore/conf/schema.xml etc/solrschema.xml cp /usr/local/Cellar/solr/8.2.0/server/solr/mycore/conf/solrconfig.xml etc/solrconfig.xml Reload the core: curl 'http://127.0.0.1:8983/solr/admin/cores?action=RELOAD&core=findhello-local&wt=json' Now rebuild the index and everything should be ready to go: python manage.py rebuild_index Make sure to commit the changes in etc and push them. You also need to make sure to update these files on staging and production so see the deployment notes on Solr Troubleshooting Error regarding currency.xml After installing the schema with Haystack, I was noticing this error in the Solr admin panel org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Could not load conf for core findhello-local: Error while parsing currency configuration file currency.xml This is due to the default haystack schema that it generates includes fields for currency, for example: <dynamicField name=\"*_c\" type=\"currency\" indexed=\"true\" stored=\"true\"/> ... <fieldType name=\"currency\" class=\"solr.CurrencyField\" precisionStep=\"8\" defaultCurrency=\"USD\" currencyConfig=\"currency.xml\" /> ... So delete them! Or you can add an example currency.xml to the core's config folder: https://raw.githubusercontent.com/apache/lucene-solr/master/solr/example/files/conf/currency.xml Error regarding QueryElevationComponent If you see this in the Solr admin: org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Error initializing QueryElevationComponent Delete the following from the solrconfig.xml : <!-- Query Elevation Component http://wiki.apache.org/solr/QueryElevationComponent a search component that enables you to configure the top results for a given query regardless of the normal lucene scoring. --> <searchComponent name=\"elevator\" class=\"solr.QueryElevationComponent\" > <!-- pick a fieldType to analyze queries --> <str name=\"queryFieldType\">string</str> <str name=\"config-file\">elevate.xml</str> </searchComponent> <!-- A request handler for demonstrating the elevator component --> <requestHandler name=\"/elevate\" class=\"solr.SearchHandler\" startup=\"lazy\"> <lst name=\"defaults\"> <str name=\"echoParams\">explicit</str> </lst> <arr name=\"last-components\"> <str>elevator</str> </arr> </requestHandler>","title":"Solr setup"},{"location":"FindHello%20Development/solr-setup/#solr-setup","text":"","title":"Solr Setup"},{"location":"FindHello%20Development/solr-setup/#install-solr","text":"Use brew to install solr: brew install solr This places the Solr home directory at /usr/local/Cellar/solr/8.2.0/server/solr/ Start it running locally: solr start Create a new core: solr create -c findhello-local -d _default","title":"Install Solr"},{"location":"FindHello%20Development/solr-setup/#setup-django","text":"Haystack should already be installed in your local Django set up via the requirements files, but if not: pip install django-haystack Update your .env vars to make sure you are using the Solr backend and not the dummy search backend that is enabled by default: HAYSTACK_ADMIN_URL=\"http://127.0.0.1:8983/solr/\" HAYSTACK_URL=\"http://127.0.0.1:8983/solr/findhello-local/\" HAYSTACK_ENGINE=\"haystack.backends.solr_backend.SolrEngine\" Note that the URL points to the core, while the ADMIN_URL is just the default admin panel.","title":"Setup Django"},{"location":"FindHello%20Development/solr-setup/#install-existing-schemaxml-and-solrconfigxml","text":"Assuming you haven't made any changes to the search indexes, you can install the schema.xml file and solrconfig.xml file that are saved in the repo's etc folder: cp etc/solrschema.xml /usr/local/Cellar/solr/8.2.0/server/solr/findhello-local/conf/schema.xml cp etc/solrconfig.xml /usr/local/Cellar/solr/8.2.0/server/solr/findhello-local/conf/solrconfig.xml Then reload the core: curl 'http://127.0.0.1:8983/solr/admin/cores?action=RELOAD&core=findhello-local&wt=json' and rebuild the index: python manage.py rebuild_index","title":"Install existing schema.xml and solrconfig.xml"},{"location":"FindHello%20Development/solr-setup/#updating-index-and-therefore-schemaxml-and-solrconfigxml","text":"If you have made any changes to the search_indexes.py file, you will need to update the schema.xml and solrconfig.xml locally (and on the staging/production cores). After making your changes, run: python manage.py build_solr_schema -c /usr/local/Cellar/solr/8.2.0/server/solr/findhello-local/conf/ then copy the updated xml files to your repo: cp /usr/local/Cellar/solr/8.2.0/server/solr/mycore/conf/schema.xml etc/solrschema.xml cp /usr/local/Cellar/solr/8.2.0/server/solr/mycore/conf/solrconfig.xml etc/solrconfig.xml Reload the core: curl 'http://127.0.0.1:8983/solr/admin/cores?action=RELOAD&core=findhello-local&wt=json' Now rebuild the index and everything should be ready to go: python manage.py rebuild_index Make sure to commit the changes in etc and push them. You also need to make sure to update these files on staging and production so see the deployment notes on Solr","title":"Updating index (and therefore schema.xml and solrconfig.xml)"},{"location":"FindHello%20Development/solr-setup/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"FindHello%20Development/solr-setup/#error-regarding-currencyxml","text":"After installing the schema with Haystack, I was noticing this error in the Solr admin panel org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Could not load conf for core findhello-local: Error while parsing currency configuration file currency.xml This is due to the default haystack schema that it generates includes fields for currency, for example: <dynamicField name=\"*_c\" type=\"currency\" indexed=\"true\" stored=\"true\"/> ... <fieldType name=\"currency\" class=\"solr.CurrencyField\" precisionStep=\"8\" defaultCurrency=\"USD\" currencyConfig=\"currency.xml\" /> ... So delete them! Or you can add an example currency.xml to the core's config folder: https://raw.githubusercontent.com/apache/lucene-solr/master/solr/example/files/conf/currency.xml","title":"Error regarding currency.xml"},{"location":"FindHello%20Development/solr-setup/#error-regarding-queryelevationcomponent","text":"If you see this in the Solr admin: org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Error initializing QueryElevationComponent Delete the following from the solrconfig.xml : <!-- Query Elevation Component http://wiki.apache.org/solr/QueryElevationComponent a search component that enables you to configure the top results for a given query regardless of the normal lucene scoring. --> <searchComponent name=\"elevator\" class=\"solr.QueryElevationComponent\" > <!-- pick a fieldType to analyze queries --> <str name=\"queryFieldType\">string</str> <str name=\"config-file\">elevate.xml</str> </searchComponent> <!-- A request handler for demonstrating the elevator component --> <requestHandler name=\"/elevate\" class=\"solr.SearchHandler\" startup=\"lazy\"> <lst name=\"defaults\"> <str name=\"echoParams\">explicit</str> </lst> <arr name=\"last-components\"> <str>elevator</str> </arr> </requestHandler>","title":"Error regarding QueryElevationComponent"},{"location":"FindHello%20Other/analytics/","text":"Both Google Analytics and Facebook Pixel are set up to track ad attibution and/or event tracking in the app on both web and mobile. Google Analytics Google Analytics is set up using the web Javascript library only. In other words we're not using the Cordova native library for the device, we're using the standard gtag.js library for both device and web. To enable analytics for a build, you simply need to make sure the GOOGLE_ANALYTICS_ID is present in your environment variables. Once the app detects that env var it will start sending analytics. The actual insertion of the library is handled via an Ionic provider. You can see the code in the app in src/providers/google-analytics/google-analytics.js To add new events in the code you simply need: ... // The path will be different depending on the file you are importing to import { GoogleAnalyticsProvider } from '../providers/google-analytics/google-analytics'; ... constructor( ... public googleAnalytics: GoogleAnalyticsProvider ) {} ... this.googleAnalytics.send('event', 'my-event'); The values for each account are: Adwords: 239-487-1756 Web: UA-56057294-4 Mobile: UA-56057294-3 More information here: https://developers.google.com/analytics/devguides/collection/gtagjs/events#send_events https://support.google.com/analytics/answer/1033068#Anatomy Developing locally When developing locally, you should make sure that no analytics or adwords IDs are included in the enviromnets.ts : API_URL=\"http://localhost:8000/\", GOOGLE_MAPS_API_KEY=(lookup in Google cloud account) Deploying web The webapp is deployed to staging and production automatically by CircleCI. This is configured to automatically insert the relevant environment variables to the build for production. No analytics are recorded on the staging server. Building Android and iOS for deployment When building the mobile apps on your machine, you need to make sure that the correct analytics and adwords IDs are in the environment.prod.ts file: API_URL=\"https://resources.therefugeecenter.org/\", GOOGLE_MAPS_API_KEY=(lookup in Google cloud account), GOOGLE_ANALYTICS_ID=\"UA-56057294-3\", GOOGLE_ADWORDS_ID=\"239-487-1756\" Facebook Pixel The Facebook tracking pixel is more straight forward. An img tag is simply inserted into the app with the Facebook Pixel ID. You can see this in the app in src/app/app.html . Like the Google Analytics, this is controlled via an env variable. So to enable it, add the following to the environment.prod.ts : ... FACEBOOK_PIXEL_ID=\"1708890232460225\" Again, this is automatically handled for web buils via CircleCI.","title":"Analytics"},{"location":"FindHello%20Other/analytics/#google-analytics","text":"Google Analytics is set up using the web Javascript library only. In other words we're not using the Cordova native library for the device, we're using the standard gtag.js library for both device and web. To enable analytics for a build, you simply need to make sure the GOOGLE_ANALYTICS_ID is present in your environment variables. Once the app detects that env var it will start sending analytics. The actual insertion of the library is handled via an Ionic provider. You can see the code in the app in src/providers/google-analytics/google-analytics.js To add new events in the code you simply need: ... // The path will be different depending on the file you are importing to import { GoogleAnalyticsProvider } from '../providers/google-analytics/google-analytics'; ... constructor( ... public googleAnalytics: GoogleAnalyticsProvider ) {} ... this.googleAnalytics.send('event', 'my-event'); The values for each account are: Adwords: 239-487-1756 Web: UA-56057294-4 Mobile: UA-56057294-3 More information here: https://developers.google.com/analytics/devguides/collection/gtagjs/events#send_events https://support.google.com/analytics/answer/1033068#Anatomy","title":"Google Analytics"},{"location":"FindHello%20Other/analytics/#developing-locally","text":"When developing locally, you should make sure that no analytics or adwords IDs are included in the enviromnets.ts : API_URL=\"http://localhost:8000/\", GOOGLE_MAPS_API_KEY=(lookup in Google cloud account)","title":"Developing locally"},{"location":"FindHello%20Other/analytics/#deploying-web","text":"The webapp is deployed to staging and production automatically by CircleCI. This is configured to automatically insert the relevant environment variables to the build for production. No analytics are recorded on the staging server.","title":"Deploying web"},{"location":"FindHello%20Other/analytics/#building-android-and-ios-for-deployment","text":"When building the mobile apps on your machine, you need to make sure that the correct analytics and adwords IDs are in the environment.prod.ts file: API_URL=\"https://resources.therefugeecenter.org/\", GOOGLE_MAPS_API_KEY=(lookup in Google cloud account), GOOGLE_ANALYTICS_ID=\"UA-56057294-3\", GOOGLE_ADWORDS_ID=\"239-487-1756\"","title":"Building Android and iOS for deployment"},{"location":"FindHello%20Other/analytics/#facebook-pixel","text":"The Facebook tracking pixel is more straight forward. An img tag is simply inserted into the app with the Facebook Pixel ID. You can see this in the app in src/app/app.html . Like the Google Analytics, this is controlled via an env variable. So to enable it, add the following to the environment.prod.ts : ... FACEBOOK_PIXEL_ID=\"1708890232460225\" Again, this is automatically handled for web buils via CircleCI.","title":"Facebook Pixel"},{"location":"FindHello%20Other/arabic-translations/","text":"This is a real pain, particularly when trying to insert English to the ar.json file: { content: \"<p>(Arabic and english)</p>\" } First off, I find the best editor to use on Mac is the default text editor (TextEdit) in plaintext mode . The issue here as I understand it is that the JSON document needs to be in LTR mode but the sentences are written in RTL. The reason the JSON document needs to be in LTR mode is that most text editors can't render the JSON structure nor the HTML tags in RTL correctly. Even though the editor is in LTD mode, the Arabic sentences themselves are saved RTL. This means that the second you try to copy/paste into the file, or edit any of the sentences, it will mess up, as the editor is trying to write in LTR but the sentences are originally RTL. To get around this and cleanly edit the text in the file, it's easiest to construct the translations in a separate blank document. Unlike the JSON, this blank document should be in RTL mode. TextEdit allows you to set both the \"document\" direction as well as the \"selection\" direction by selecting \"Text\" > \"Writing Direction\" in the toolbar. Make sure both of these are \"Right to left\". With that done you can edit/write new sentences before transferring them to the JSON. The important part is when you go to paste back to the JSON. Although you keep the JSON document in LTR, you need to place the cursor where you want to paste and then change the \"Selection\" text direction from above to \"Right to left\". In other words, the document stays LTR but the selection/paste goes to RTL. Then you should be able to insert correctly.","title":"Arabic Translations"},{"location":"FindHello%20Other/search/","text":"Search Search and autocomplete for the application are handled by Haystack and Solr. Haystack is the Django implementation and interface for the search-backend which in our case is Solr. Solr uses Apache Lucene behind the scenes. We have Solr set up as a stand-alone server on AWS. Solr in Production How Solr is set up for production is covered in the Deployment Solr Setup Guide . This AWS instance is currently hidden from public internet traffic. Solr in Development During development, the Django API uses a dummy search backend instead of a Solr instance to make life easier. This means you can ignore Solr in development if you want to. That said, you can set up a Solr instance fairly easily on MacOS if you need to test it. Install Solr via the Solr Setup Guide and then update your .env variables to make use of it locally: HAYSTACK_ADMIN_URL=\"http://127.0.0.1:8983/solr/\" HAYSTACK_URL=\"http://127.0.0.1:8983/solr/mycore/\" HAYSTACK_ENGINE=\"haystack.backends.solr_backend.SolrEngine\" Updating the index Any time you make changes to the structure of the index (in other words, updating location/search_indexes.py for example) you need to update the Solr configurations on both staging and production. Put another way, Haystack doesn't automatically do this for you - you have to manually do it yourself. A good workflow for this is to: Make the changes to the schema.xml and/or solrconfig.xml locally first Test on your local version of Solr Commit schema.xml and/or solrconfig.xml to the /etc/ folder so that these are always the most up to date version Copy these comitted versions to the production Solr instance","title":"Search"},{"location":"FindHello%20Other/search/#search","text":"Search and autocomplete for the application are handled by Haystack and Solr. Haystack is the Django implementation and interface for the search-backend which in our case is Solr. Solr uses Apache Lucene behind the scenes. We have Solr set up as a stand-alone server on AWS.","title":"Search"},{"location":"FindHello%20Other/search/#solr-in-production","text":"How Solr is set up for production is covered in the Deployment Solr Setup Guide . This AWS instance is currently hidden from public internet traffic.","title":"Solr in Production"},{"location":"FindHello%20Other/search/#solr-in-development","text":"During development, the Django API uses a dummy search backend instead of a Solr instance to make life easier. This means you can ignore Solr in development if you want to. That said, you can set up a Solr instance fairly easily on MacOS if you need to test it. Install Solr via the Solr Setup Guide and then update your .env variables to make use of it locally: HAYSTACK_ADMIN_URL=\"http://127.0.0.1:8983/solr/\" HAYSTACK_URL=\"http://127.0.0.1:8983/solr/mycore/\" HAYSTACK_ENGINE=\"haystack.backends.solr_backend.SolrEngine\"","title":"Solr in Development"},{"location":"FindHello%20Other/search/#updating-the-index","text":"Any time you make changes to the structure of the index (in other words, updating location/search_indexes.py for example) you need to update the Solr configurations on both staging and production. Put another way, Haystack doesn't automatically do this for you - you have to manually do it yourself. A good workflow for this is to: Make the changes to the schema.xml and/or solrconfig.xml locally first Test on your local version of Solr Commit schema.xml and/or solrconfig.xml to the /etc/ folder so that these are always the most up to date version Copy these comitted versions to the production Solr instance","title":"Updating the index"}]}